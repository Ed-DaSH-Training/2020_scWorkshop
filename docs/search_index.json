[
["index.html", "ANALYSIS OF SINGLE CELL RNA-SEQ DATA 1 Introduction 1.1 COURSE OVERVIEW 1.2 TARGETED AUDIENCE &amp; ASSUMED BACKGROUND 1.3 COURSE FORMAT 1.4 Getting Started 1.5 SESSION CONTENT", " ANALYSIS OF SINGLE CELL RNA-SEQ DATA Orr Ashenberg Dana Silverbush Kirk Gosik 03/23/2020 - 03/27/2020 1 Introduction 1.1 COURSE OVERVIEW In recent years single cell RNA-seq (scRNA-seq) has become widely used for transcriptome analysis in many areas of biology. In contrast to bulk RNA-seq, scRNA-seq provides quantitative measurements of the expression of every gene in a single cell. However, to analyze scRNA-seq data, novel methods are required and some of the underlying assumptions for the methods developed for bulk RNA-seq experiments are no longer valid. In this course we will cover all steps of the scRNA-seq processing, starting from the raw reads coming off the sequencer. The course includes common analysis strategies, using state-of-the-art methods and we also discuss the central biological questions that can be addressed using scRNA-seq. 1.2 TARGETED AUDIENCE &amp; ASSUMED BACKGROUND This course is aimed at researchers and technical workers who are or will be analyzing scRNA-seq data. The material is suitable both for experimentalists who want to learn more about data-analysis as well as computational biologists who want to learn about scRNASeq methods. Examples demonstrated in this course can be applied to any experimental protocol or biological system. The requirements for this course are: 1. Working knowledge of unix (managing files, running programs) 2. Programming experience in R (writing a function, basic I/O operations, variable types, using packages). Bioconductor experience is a plus. 3. Familiarity with next-generation sequencing data and its analyses (using alignment and quantification tools for bulk sequencing data) 1.3 COURSE FORMAT The course will be delivered over the course of five days. Each day will include a lecture and laboratory component. The lecture will introduce the topics of discussion and the laboratory sessions will be focused on practical hands-on analysis of scRNA-seq data. These sessions will involve a combination of both mirroring exercises with the instructor to demonstrate a skill as well as applying these skills on your own to complete individual exercises. After and during each exercise, interpretation of results will be discussed as a group. Computing will be done using a combination of tools installed on the attendees laptop computer and web resources accessed via web browser. 1.4 Getting Started 1.5 SESSION CONTENT 1.5.1 Monday – Classes from 08:00 to 16:00 (lunch break-1 hr, 40 min of total coffee breaks) Shared Google doc - course notes, ideas/questions/challenges/interesting topics you would like to explore. 1.5.1.1 Lecture 1 – scRNA-Seq experimental design (Orr) Overview of course General introduction: cell atlas overviews Comparison of Bulk and single cell RNA-Seq Overview of available scRNA-seq technologies (10x) and experimental protocols scRNA-Seq experimental design and analysis workflow? 1.5.1.2 Lab 1 – Understanding sequencing raw data, downloading Docker if not done already (Kirk) 1.5.1.3 Lab based around data wrangling from public data repositories: get data from 10x website, single cell portal, from GEO (fastqs, counts) Shell and Unix commands to navigate directories, create folders, open files Raw file formats 1.5.1.4 Lecture 2 - Intro to Data processing: from bcl file to bam file, Transcriptome quantification: from bam file to counts (Dana) scRNA-Seq processing workflow starting with choice of sequencer (NextSeq, HiSeq, MiSeq) / barcode swapping and bcl files Overview of Popular tools and algorithms Common single-cell analyses and interpretation Sequencing data: alignment and quality control Looking at cool things in alignment like where reads are, mutations, splicing Read &amp; UMI counting (Kallisto alignment-free pseudocounts as well), how RSEM works (length dependence, sequencing depth, multimapping reads), CellRanger (dropest), bustools 10x barcode structure and links to Perturb-seq Gene length &amp; coverage Gene expression units (count data Smart-seq2 counts or 10x UMIs vs expression data) 1.5.1.5 Lab 2 – Processing raw scRNA-Seq data (Dana), Docker setup (Kirk) Data outputs from different scRNAseq technologies (10x, Smart-seq2) - process both? Demultiplexing sequencing data Read Quality Control (CellRanger, dropEst, fastqc) Run bowtie2 on 2 wells to demonstrate alignment Read alignment and visualization (kallisto, RSEM, Igviewer) Demultiplexing FastQC Align (STAR/TOPHAT/Kallisto) IGViewer - what do we want here? I use it for mutation detections, copying sequences, searching for alternative splicing. 1.5.1.6 Flash talks (1.5 hr, break into 2 groups of 13) placed into a dropbox 1 slide advertising or summarizing the poster. So you can introduce yourselves and we can get to know each other. No questions, 2 minutes. Two sessions, 15 people each. 1.5.2 Tuesday – Classes from 08:00 to 16:00 1.5.2.1 Lab 3 - Introduction to R (Kirk) Some R overview slides, https://r4ds.had.co.nz/ Installing packages Data-types Data manipulation, slicing Strings manipulations Introducing object oriented programming / S4 objects Visualization tools Bonus create FeaturePlot from Seurat in base ggplot Bonus: run RSEM on Dana’s bam files if you are bored 1.5.2.2 Lecture 3 - Expression QC, normalisation and gene-level batch correction (Orr) What CellRanger does for quality filtering PBMC data Normalisation methods https://www.nature.com/articles/nmeth.4292 Doublets, empty droplets, CellBender Barcode swapping Regression with technical covariates What about imputation? 1.5.2.3 Lab 4 – Data wrangling for scRNAseq data (Dana) Data structures and file formats for single-cell data Quality control of cells and genes (doublets, ambient, empty drops) Data exploration: violin plots… Introducing Seurat object Genes House keeping genes Mitochondrial genes Filter Normalize Find variable genes Scaling Regression Calculate a signature 1.5.2.4 Flash talks (1.5 hr, break into 2 groups of 13) placed into a dropbox 1 slide advertising or summarizing the poster. So you can introduce yourselves and we can get to know each other. No questions, 2 minutes. Two sessions, 15 people each. 1.5.3 Wednesday – Classes from 08:00 to 16:00 1.5.3.1 Lecture 4 (may start late Tuesday) - Identifying cell populations (Kirk) Feature selection Dimensionality reduction Clustering and assigning identity (Louvain, NMF, topic models, variational autoencoder) Differential expression tests 1.5.3.2 Lab 5 – Feature selection &amp; Clustering analysis (Kirk) Parameters and clustering Comparison of feature selection methods 1.5.3.3 Lecture 5 - Batch effects correction (Orr) Batch correction methods (regress out batch, scaling within batch, Seurat v3, MNN, Liger, Harmony, scvi, scgen) Evaluation methods for batch correction (ARI, average silhouette width, kBET…) 1.5.3.4 Lab 6 - Correcting batch effects (Orr) Comparison of batch correction methods, Seurat pancreas Use Seurat Wrappers? 1.5.4 Thursday – Classes from 08:00 to 16:00 Deciding on discussion topics for next day based on shared google doc. 1.5.4.1 Lecture 6 - Advanced topics (Kirk) Pseudotime inference Differential expression through pseudotime Deep learning or spatial data depending on questionnaire (20ish min, autoencoder as nonlinear dimension reduction, scvi, what questions to ask to evaluate whether a more advanced model helps, how to decide it’s safe to use a method, tradeoffs between method complexity and interpretability) 1.5.4.2 Lab 7 - Functional and Pseudotime analysis (Orr) Popular tools and packages for functional analysis (https://github.com/dynverse/dynmethods#list-of-included-methods) Review concepts from papers Comparison of pseudotime methods 1.5.4.3 Lecture 7 - Single-cell multi-omic technologies (Dana) Introduction to other omic data types Integrating scRNA-seq with other single-cell modalities (CITE, Perturb, ATAC, methylation…) 1.5.4.4 Lab 8 - Analysis of CITE-seq, scATAC-seq (Orr) https://github.com/Hoohm/CITE-seq-Count https://cite-seq.com/eccite-seq/ https://support.10xgenomics.com/single-cell-vdj/index/doc/technical-note-assay-scheme-and-configuration-of-chromium-single-cell-vdj-libraries https://satijalab.org/seurat/multimodal_vignette.html https://www.bioconductor.org/packages/devel/bioc/vignettes/cicero/inst/doc/website.html 1.5.5 Friday – Classes from 08:00 to 16:00 Small group discussion on selected topics through hangouts . #### Lab 10 - small dataset for analysis and office hours focused on select topics (Dana) For project on last day (plan for whole day), Dana will prepare datasets for 3 or more ish mut glioma tumors that they will download beforehand. The datasets may need to be subsampled to save time. Can do pseudotime, can run scvi, nmf. Groups of 3 students. "],
["introduction-1.html", "2 Introduction 2.1 Slides", " 2 Introduction 2.1 Slides "],
["understanding-sequencing-raw-data.html", "3 Understanding Sequencing Raw Data 3.1 Class Environment 3.2 Shell and Unix commands 3.3 File formats 3.4 Public data repositories 3.5 Docker Commands", " 3 Understanding Sequencing Raw Data 3.1 Class Environment 3.1.1 Getting into AWS Instance There is a nice breakdown from another Physalia course on instructions for different operating systems and accessing AWS. It is called Connection to the Amazon EC2 service. This will help with connecting to the AWS instance to run docker. ## Example ssh -i berlin.pem ubuntu@&lt;PUBLIC IP ADDRESS&gt; (e.g.34.219.254.245) ## Actual Command Example ssh -i berlin.pem ubuntu@34.213.180.241 3.2 Shell and Unix commands 3.2.1 Common Linux Commands 3.2.1.1 Lab 1a check the your present directory pwd check history history pipe history to grep to search for the cd command history | grep cd put history into a history.txt file history &gt; history.txt make a directory called data mkdir data change into data directory cd data move history.txt file into data directory mv ../history.txt ./ check manual page of wget command man wget redirect wget maunual page output into a file called wget.txt man wget &gt; wget.txt return the lines that contain output in the wget.txt file cat wget.txt | grep output grep -i output wget.txt Compress wget.txt file gzip wget.txt View Compressed file cat wget.txt.qz zcat wget.txt.qz zcat wget.txt.qz | less 3.2.1.2 Git Commands Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows. Go to your user directory and run the following command from git. This will create a directory of all the course material inside your user directory. After it is done cloning change directory into the 2020_scWorkshop directory where the course material is. The commands are below. ## clone repository git clone https://github.com/broadinstitute/2020_scWorkshop.git cd 2020_scWorkshop 3.3 File formats bcl fastq bam mtx, tsv hdf5 (.h5, .h5ad) 3.3.1 View FASTQ Files 3.3.1.1 Viewing entire file cat data/example_fastq.fastq 3.3.1.2 Viewing first 10 lines head data/example_fastq.fastq 3.3.1.3 Stream Viewing with less command less data/example_fastq.fastq 3.3.2 View BAM Files 3.3.2.1 Viewing first 10 lines samtools view data/ex1.bam | head 3.3.2.2 Stream Viewing with less command samtools view data/ex1.bam | less 3.4 Public data repositories 3.4.1 Cellranger/10x 3.4.1.1 Lab 1b 10x PBMC data are hosted in https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz get 10x PBMC data unzip data explore directory explore files wget https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz cd .. 3.4.2 GEO https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE81905 3.4.2.1 Lab 1c Get GEO Data - ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE81nnn/GSE81905/matrix/GSE81905-GPL19057_series_matrix.txt.gz - ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE81nnn/GSE81905/matrix/GSE81905-GPL17021_series_matrix.txt.gz go into that directory get files and place them in the directory View files (try keeping in compressed format and view that way) wget ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE81nnn/GSE81905/matrix/GSE81905-GPL19057_series_matrix.txt.gz cd data; tar -xzf GSE81905-GPL19057_series_matrix.txt.gz cd .. 3.4.3 Single Cell Portal https://portals.broadinstitute.org/single_cell Study: Salk Institute - Single-cell Methylome Sequencing Identifies Distinct Neuronal Populations in Mouse Frontal Cortex 3.4.3.1 Lab 1d Get R2 fastq file from the Salk Institute study Look at files 3.4.3.2 Lab 1e Get Docker on your local computer for you to have Explore Single Cell Portal Explore GEO 3.5 Docker Commands Docker provides a consistent compute enviornment to ensure all software that you need is on the machine and able to be used. It will give you the version you need and help reduce software conflicts that may arise. make sure you are in the directory from the cloned repository directory run following command to start docker script # chmod 700 ./docker/run_docker_bash.sh ./docker/run_docker_bash.sh The full command inside the script is below. There is also an explaination of each part for your reference. ## if you are the super user on your computer docker run --rm -it -v $PWD:/home/rstudio/materials kdgosik/2020scworkshop bash ## if you need to access permission to run the command sudo docker run --rm -it -v $PWD:/home/rstudio/materials kdgosik/2020scworkshop bash Explaination of commands - docker: command to run docker - run: asking docker to run a container - --rm: flag to remove the container when you exit from it - nothing will be saved from your session to access again later - this flag can be removed to keep container - -it: flag to run the container interactively - this will keep all session output displaying on the terminal - to stop container go to terminal and press Crtl+c -v $PWD:/home/rstudio/materials: map your home directory to a directory inside docker container called home - kdgosik/2020scworkshop: the image to run. It will be the image into a container if not already built on your computer - [image link](https://hub.docker.com/r/kdgosik/2020scworkshop) - bash: The entry point into the container. Start on the bash command line "],
["transcriptome-quantification.html", "4 Transcriptome Quantification 4.1 Google Slides", " 4 Transcriptome Quantification 4.1 Google Slides "],
["processing-scrnaseq-data.html", "5 Processing scRNAseq Data 5.1 Goal 5.2 Further reading 5.3 Download data 5.4 Align the reads 5.5 Visualization", " 5 Processing scRNAseq Data 5.1 Goal To give you experience with examining and aligning fastq files 5.2 Further reading This lab is based on a lab given in: http://hemberg-lab.github.io/scRNA.seq.course/processing-raw-scrna-seq-data.html For more exercises and ideas please visit their web-site! 5.3 Download data Please downlaod the 6 files from the dropbox folder: https://www.dropbox.com/sh/98573jes82w0fi7/AAB7Yhwe05MCZTnTZmppxZuta?dl=0 into the data folder of your copy of github: cd 2020_scWorkshop/data mkdir lab2data and copy the files into it ## FastQC Once you’ve obtained your single-cell RNA-seq data, the first thing you need to do with it is check the quality of the reads you have sequenced. For this task, today we will be using a tool called FastQC. FastQC is a quality control tool for sequencing data, which can be used for both bulk and single-cell RNA-seq data. FastQC takes sequencing data as input and returns a report on read quality. Copy and paste this link into your browser to visit the FastQC website: https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ This website contains links to download and install FastQC and documentation on the reports produced. Fortunately we have already installed FastQC for you today, so instead we will take a look at the documentation. Scroll down the webpage to ‘Example Reports’ and click ‘Good Illumina Data’. This gives an example of what an ideal report should look like for high quality Illumina reads data. Now let’s make a FastQC report ourselves. Today we will be performing our analysis using a single cell from an mESC dataset produced by (Kolodziejczyk et al. 2015), which you downloaded froom the github link. The cells were sequenced using the SMART-seq2 library preparation protocol and the reads are paired end. First, let’s open the docker in a bash mode. open a terminal, cd to the docer folder (the folder you downloaded from github) and run this command: docker run --rm -ti -v $PWD:/home/rstudio -e DISABLE_AUTH=true kdgosik/2020scworkshop bash navigate to your data folder: cd home/rstudio/lab2data ls You should see the files that you downloaded from the dropbox link. Now let’s look at the files: less Teichmann_2i_2_2_1.fastq less Teichmann_2i_2_2_2.fastq We run fastqc from /usr/local/src/FastQC. You may need to give yourself permissions to run the file (hint: chmod) Task 1: run fastqc to view the quality of the reads chmod 755 /usr/local/src/FastQC/fastqc /usr/local/src/FastQC/fastqc -h This command will tell you what options are available to pass to FastQC. Let us direct our output to our personal directories (under the folder results). Feel free to ask for help if you get stuck! If you are successful, you should generate a .zip and a .html file for both the forwards and the reverse reads files. Once you have been successful, feel free to have a go at the next section. /usr/local/src/FastQC/fastqc -o &lt;output_folder&gt; Teichmann_2i_2_2_1.fastq Teichmann_2i_2_2_2.fastq Once the command has finished executing, you should have a total of four files - one zip file for each of the paired end reads, and one html file for each of the paired end reads. The report is in the html file. for those working in AWS, if you want to view the file you will need to download it to your computer. The scp command is: scp -r -i &lt;your pem file&gt; &lt;username&gt;@ec2-34-213-180-241.us-west-2.compute.amazonaws.com:~/&lt;file to copy&gt; &lt;destination in your computer&gt; Once the file is on you computer, click on it. Your FastQC report should open. Have a look through the file. Remember to look at both the forwards and the reverse end read reports! How good quality are the reads? Is there anything we should be concerned about? 5.3.1 Fastq file format FastQ is the most raw form of scRNASeq data you will encounter. All scRNASeq protocols are sequenced with paired-end sequencing. Barcode sequences may occur in one or both reads depending on the protocol employed. However, protocols using unique molecular identifiers (UMIs) will generally contain one read with the cell and UMI barcodes plus adapters but without any transcript sequence. Thus reads will be mapped as if they are single-end sequenced despite actually being paired end. FastQ files have the format: &gt;ReadID READ SEQUENCE + SEQUENCING QUALITY SCORES 5.4 Align the reads 5.4.1 STAR align Now we have established that our reads are of good quality, we would like to map them to a reference genome. This process is known as alignment. Some form of alignment is generally required if we want to quantify gene expression or find genes which are differentially expressed between samples. Many tools have been developed for read alignment, but today we will focus on STAR. For each read in our reads data, STAR tries to find the longest possible sequence which matches one or more sequences in the reference genome. Because STAR is able to recognize splicing events in this way, it is described as a ‘splice aware’ aligner. Usually STAR aligns reads to a reference genome, potentially allowing it to detect novel splicing events or chromosomal rearrangements. However, one issue with STAR is that it needs a lot of RAM, especially if your reference genome is large (eg. mouse and human). To speed up our analysis today, we will use STAR to align reads from to a reference transcriptome of 2000 transcripts. Note that this is NOT normal or recommended practice, we only do it here for reasons of time. We recommend that normally you should align to a reference genome. Two steps are required to perform STAR alignment. In the first step, the user provides STAR with reference genome sequences (FASTA) and annotations (GTF), which STAR uses to create a genome index. In the second step, STAR maps the user’s reads data to the genome index. Let’s create the index now. Remember, for reasons of time we are aligning to a transcriptome rather than a genome today, meaning we only need to provide STAR with the sequences of the transcripts we will be aligning reads to. You can obtain transcriptomes for many model organisms from Ensembl (https://www.ensembl.org/info/data/ftp/index.html). Task 2: Create a genome index First create the output folder for the index in your personal folder under results (recommended /home/rstudio/lab2data/STAR/indices). We run STAR from: /usr/local/src/STAR/bin/Linux_x86_64 using the command: /usr/local/src/STAR/bin/Linux_x86_64/STAR --runThreadN 4 --runMode genomeGenerate --genomeDir &lt;output STAR indices folder&gt; --genomeFastaFiles /home/rstudio/lab2data/2000_reference.transcripts.fa Now that we have created the index, we can perform the mapping step. Task 4: Try to work out what command you should use to map our fastq files to the index you created. Use the STAR manual to help you. Once you think you know the answer use ./STAR command to align the fastq files to a BAM file. You can either create a SAM file and convert it to BAM using samtools, or use STAR to directly output a BAM file (–outSAMtype BAM Unsorted) /usr/local/src/STAR/bin/Linux_x86_64/STAR --runThreadN 4 --genomeDir &lt;genome_reference&gt; --readFilesIn /home/rstudio/lab2data/Teichmann_2i_2_2_1.fastq /home/rstudio/lab2data/Teichmann_2i_2_2_2.fastq --outFileNamePrefix &lt;output_folder&gt; --outSAMtype BAM Unsorted The alignment may take awhile, if you wish to you can complete tasks 7-10 in the meanwhile. 5.4.2 Bam file format BAM file format stores mapped reads in a standard and efficient manner. The human-readable version is called a SAM file, while the BAM file is the highly compressed version. BAM/SAM files contain a header which typically includes information on the sample preparation, sequencing and mapping; and a tab-separated row for each individual alignment of each read. Alignment rows employ a standard format with the following columns: QNAME : read name (generally will include UMI barcode if applicable) FLAG : number tag indicating the “type” of alignment, link to explanation of all possible “types” RNAME : reference sequence name (i.e. chromosome read is mapped to). POS : leftmost mapping position MAPQ : Mapping quality CIGAR : string indicating the matching/mismatching parts of the read (may include soft-clipping). RNEXT : reference name of the mate/next read PNEXT : POS for mate/next read TLEN : Template length (length of reference region the read is mapped to) SEQ : read sequence QUAL : read quality BAM/SAM files can be converted to the other format using ‘samtools’: samtools view -S -b file.sam &gt; file.bam samtools view -h file.bam &gt; file.sam Some sequencing facilities will automatically map your reads to the a standard genome and deliver either BAM or CRAM formatted files. Generally they will not have included ERCC sequences in the genome thus no ERCC reads will be mapped in the BAM/CRAM file. To quantify ERCCs (or any other genetic alterations) or if you just want to use a different alignment algorithm than whatever is in the generic pipeline (often outdated), then you will need to convert the BAM/CRAM files back to FastQs: BAM files can be converted to FastQ using bedtools. To ensure a single copy for multi-mapping reads first sort by read name and remove secondary alignments using samtools. Picard also contains a method for converting BAM to FastQ files. Bonus: To make our aligned BAM file easy to navigate (needed for IGViewer) we will sort and index it using samtools. Sam tools can be run from everywhere (no need to go to a special directory!) using the command: samtools Let us start by sorting the BAM file: samtools sort Aligned.out.bam -o Aligned.out.sorted.bam Task 6: can you index the file? hint: try looking at samtools -h samtools index Aligned.out.sorted.bam Once you sorted and indexed the files you should have a BAM and a bai files. The BAM file is the aligned reads, and the bai is an index file. To view them in IGViewer (IGV) first copy them into your computer. Go ahead and copy the fa file as well, we will need a reference genome file. 5.5 Visualization To view the file we will use the IGV you installed on your personal computer. Open IGV: the default genomes are human HG19 and HG38. Through the class we will be using the PBMC dataset. You have the BAM file in your data folder. Go ahead and transfer it to your computer and upload it to IGV with hg38 as reference genome. Task 7: Browse to MS4A1, this is a blood cell marker. Can you see the exons and the introns? Where are most of the aligned reads? Task 8: Search in IGV or online - can you present splice junctions? (right click -&gt; “Show splice junction track”) Task 9: Try further tasks that interest you in IGV. For example, can you detect reads that are within one exon and reads that start in one exon and continue in the next? Can you copy the sequence of exon2 in MS4A1? Task 10: What would have happened if you chose the wrong reference genome, such as hg19? Bonus 2 (IGV sometimes has difficulties loading small fa files. So if this becomes difficult - don’t worry! It’s not your alignment): The default genomes are human HG19 and HG38. However you can also upload your reference genome of choice. As we created our own fasta file we can now upload it as a reference genome. Task 11: Load new genome: go to “Genomes”-&gt;”Load from file” and load the file 2000_reference.transcripts.fa Task 12: Now load your reads: go to “File”-&gt;”Load from file” and load your BAM file. Notice that IGV needs a BAM and a bai saved in the same location. IGV uses the bai to navigate through the BAM file. Task 13: Some of the reads have a nucleotide substitution in position 993 - what is the reference nucleotide? What is the substitution? ## No non-system installation of Python could be found. ## Would you like to download and install Miniconda? ## Miniconda is an open source environment management system for Python. ## See https://docs.conda.io/en/latest/miniconda.html for more details. ## Installation aborted. "],
["introduction-rbioconductor.html", "6 Introduction R/Bioconductor 6.1 Start Environment 6.2 Installing packages 6.3 Installation instructions: 6.4 More information 6.5 Grammer of Graphics (ggplot2) 6.6 Reference", " 6 Introduction R/Bioconductor # mkdir data wget https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz cd .. 6.1 Start Environment 6.1.1 Local Command # chmod 700 ./docker/run_docker.sh ./docker/run_docker.sh full command ## maybe take away the --rm so they can save the container for later ## run from your home directory cd 2020scworkshop ## example for user17 docker run --rm -it \\ -e DISABLE_AUTH=true \\ -v $PWD:/home/rstudio/materials \\ -p 8787:8787 kdgosik/2020scworkshop Explaination of commands - docker: command to run docker - run: asking docker to run a container - --rm: flag to remove the container when you exit from it - nothing will be saved from your session to access again later - this flag can be removed to keep container - -it: flag to run the container interactively - - this will keep all session output displaying on the terminal - - to stop container go to terminal and press Crtl+c - -v $PWD:/home/rstudio: map your home directory to a directory inside docker container called home/rstudio - -p 8787:8787: map docker container port of 8787(rstudio port default) to your computer port 8787 - kdgosik/2020scworkshop: the image to run. It will be the image into a container if not already built on your computer - [image link](https://hub.docker.com/r/kdgosik/2020scworkshop) 6.1.2 AWS Command # chmod 700 ./docker/run_docker.sh ./docker/run_docker_aws.sh 9017 ## maybe take away the --rm so they can save the container for later ## run from your home directory cd 2020scworkshop ## example for user17 docker run --rm -it \\ -e PASSWORD=train \\ -v $PWD:/home/rstudio/materials \\ -p 9017:8787 kdgosik/2020scworkshop Explaination of commands - docker: command to run docker - run: asking docker to run a container - --rm: flag to remove the container when you exit from it - nothing will be saved from your session to access again later - this flag can be removed to keep container - -it: flag to run the container interactively - - this will keep all session output displaying on the terminal - - to stop container go to terminal and press Crtl+c - -v $PWD:/home/rstudio/materials: map your home directory to a directory inside docker container called home/rstudio - -p 9017:8787: map docker container port of 8787(rstudio port default) to your computer port 9017 - kdgosik/2020scworkshop: the image to run. It will be the image into a container if not already built on your computer - [image link](https://hub.docker.com/r/kdgosik/2020scworkshop) localhost:9017 or on AWS :9017 ec2-.us-west-2.compute.amazonaws.com:$PORT_NUMBER ec2-54-202-32-102.us-west-2.compute.amazonaws.com:9017 R/Rstudio parts Data Types and classes Packages and where to get them S3 vs S4 Visualizations and ggplot Installing packages Data-types Data manipulation, slicing Strings manipulations Introducing object oriented programming / S4 objects Visualization tools Bonus create FeaturePlot from Seurat in base ggplot Bonus: run RSEM on Dana’s bam files if you are bored 6.2 Installing packages 6.2.1 CRAN The Comprehensive R Archive Network CRAN is the biggest archive of R packages. There are few requirements for uploading packages besides building and installing succesfully, hence documentation and support is often minimal and figuring how to use these packages can be a challenge it itself. CRAN is the default repository R will search to find packages to install: install.packages(&quot;devtools&quot;) # or multiple packages install.packages(c(&quot;ggplot2&quot;, &quot;stringr&quot;)) 6.2.2 Github Github isn’t specific to R, any code of any type in any state can be uploaded. There is no guarantee a package uploaded to github will even install, nevermind do what it claims to do. R packages can be downloaded and installed directly from github using the “devtools” package installed above. ## username/repository devtools::install_github(&quot;satijalab/seurat&quot;) # latest stable version of Seurat package Github is also a version control system which stores multiple versions of any package. By default the most recent “master” version of the package is installed. If you want an older version or the development branch this can be specified using the “ref” parameter: # different branch devtools::install_github(&quot;satijalab/seurat&quot;, ref=&quot;release3.0&quot;) # previous commit ## Merge branch &#39;develop&#39; into feat/MultiModal ## - Shiwei Zheng committed on Jul 2, 2018 devtools::install_github(&quot;tallulandrews/M3Drop&quot;, ref=&quot;551014f488770627ab154a62e59d49df5df98a3f&quot;) Note: make sure you re-install the M3Drop master branch for later in the course. 6.2.3 Bioconductor Bioconductor is a repository of R-packages specifically for biological analyses. It has the strictest requirements for submission, including installation on every platform and full documentation with a tutorial (called a vignette) explaining how the package should be used. Bioconductor also encourages utilization of standard data structures/classes and coding style/naming conventions, so that, in theory, packages and analyses can be combined into large pipelines or workflows. Bioconductor also requires creators to support their packages and has a regular 6-month release schedule. Make sure you are using the most recent release of bioconductor before trying to install packages for the course. ## &gt;= R 3.5.0 if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;Rsamtools&quot;, ask = FALSE) 6.2.4 Source The final way to install packages is directly from source. In this case you have to download a fully built source code file, usually packagename.tar.gz, or clone the github repository and rebuild the package yourself. Generally this will only be done if you want to edit a package yourself, or if for some reason the former methods have failed. You can also get previous packages that aren’t supported any more on the CRAN package archive ## Get an old package and install from source install.packages(&quot;GenABEL_1.8-0.tar.gz&quot;, type=&quot;source&quot;) 6.3 Installation instructions: All the packages necessary for this course are available here. A list of the packages will be on the README.md for the repository. A script is also available inside the docker/install.R file. 6.3.1 Classes/Types R is a high level language so the underlying data-type is generally not important. The exception if you are accessing R data directly using another language such as C, but that is beyond the scope of this course. Instead we will consider the basic data classes: numeric, integer, logical, and character, and the higher level data class called “factor”. You can check what class your data is using the “class()” function. 6.3.1.1 Integer x &lt;- 4 ## assign value of 4 to x class(x) ## check class of x ## [1] &quot;numeric&quot; is.integer(x) ## check if x is an integer ## [1] FALSE is.numeric(x) ## check if x is numeric ## [1] TRUE x &lt;- as.numeric(x) ## assign x to be an numeric is.numeric(x) ## check if the assignment worked ## [1] TRUE class(x) ## check if the assignment worked ## [1] &quot;numeric&quot; x ## check value of x ## [1] 4 6.3.1.2 Numeric ## assign value of 1.414 to y y &lt;- 1.414 ## check class of y class(y) ## [1] &quot;numeric&quot; ## check if y is numeric is.numeric(y) ## [1] TRUE ## check if y is an integer is.integer(y) ## [1] FALSE ## assign y to be an integer y &lt;- as.integer(y) ## check if the assignment worked is.integer(y) ## [1] TRUE ## check value of y y ## [1] 1 6.3.1.3 Logical/ Boolean The logical class stores boolean truth values, i.e. TRUE and FALSE. It is used for storing the results of logical operations and conditional statements will be coerced to this class. Most other data-types can be coerced to boolean without triggering (or “throwing”) error messages, which may cause unexpected behaviour. z &lt;- TRUE ## assign value of TRUE to z class(z) ## check class of z ## [1] &quot;logical&quot; is.logical(z) ## check if z is of logical type ## [1] TRUE 6.3.2 Data structures Homogeneous 1D: atomic vector 2D: matrix nD: array Heterogeneous 1D: list 2D: data.frame 6.3.2.1 Character Vectors ## assign a character vector with c() operator character_vector &lt;- c(&quot;A&quot;, &quot;C&quot;, &quot;T&quot;, &quot;G&quot;, &quot;C&quot;, &quot;T&quot;, &quot;G&quot;, &quot;C&quot;, &quot;G&quot;, &quot;A&quot;, &quot;T&quot;, &quot;G&quot;, &quot;A&quot;, &quot;C&quot;, &quot;G&quot;, &quot;A&quot;, &quot;C&quot;) ## check class class(character_vector) ## [1] &quot;character&quot; ## access the 3rd element with [] operator ## *note*: R is index starts at 1 (other programming languages start at 0) character_vector[3] ## [1] &quot;T&quot; ## access 3rd through 6th elemenet character_vector[3:6] ## [1] &quot;T&quot; &quot;G&quot; &quot;C&quot; &quot;T&quot; ## access the elements 1,4,7,10 with c() character_vector[c(1, 4, 7, 10)] ## [1] &quot;A&quot; &quot;G&quot; &quot;G&quot; &quot;A&quot; ## access all the A&#39;s character_vector[grep(&quot;A&quot;, character_vector)] ## [1] &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; 6.3.2.2 Numeric Vector The “numeric” class is the default class for storing any numeric data - integers, decimal numbers, numbers in scientific notation, etc… ## assign a character vector with c() operator numeric_vector &lt;- c(1, 5, 21, 17, 98, 35, 11, 13) ## check class class(numeric_vector) ## [1] &quot;numeric&quot; ## access the 5th element with [] operator numeric_vector[5] ## [1] 98 ## access 2nd through 4th elemenet numeric_vector[2:4] ## [1] 5 21 17 ## backticks ` ` allow you to give names with non-typical characters `numeric?_vector` &lt;- c(&quot;A&quot;, 1, 5, 21, 17, 98, 35, 11, 13) ## check vector `numeric?_vector` ## [1] &quot;A&quot; &quot;1&quot; &quot;5&quot; &quot;21&quot; &quot;17&quot; &quot;98&quot; &quot;35&quot; &quot;11&quot; &quot;13&quot; ## check class (Notice the quotation marks on the numbers!) class(`numeric?_vector`) ## [1] &quot;character&quot; 6.3.2.3 Factor Vector String/Character data is very memory inefficient to store, each letter generally requires the same amount of memory as any integer. Thus when storing a vector of strings with repeated elements it is more efficient assign each element to an integer and store the vector as integers and an additional string-to-integer association table. Thus, by default R will read in text columns of a data table as factors. factor_vector &lt;- factor(numeric_vector) factor_vector ## [1] 1 5 21 17 98 35 11 13 ## Levels: 1 5 11 13 17 21 35 98 6.3.2.4 Named Vector names(numeric_vector) &lt;- paste0(&quot;Patient&quot;, 1 : length(numeric_vector)) numeric_vector ## Patient1 Patient2 Patient3 Patient4 Patient5 Patient6 Patient7 Patient8 ## 1 5 21 17 98 35 11 13 6.3.2.5 List ## change the c() operator to list() operator new_list &lt;- list(&quot;A&quot;, 1, 5, 21, 17, 98, 35, 11, 13) new_list ## [[1]] ## [1] &quot;A&quot; ## ## [[2]] ## [1] 1 ## ## [[3]] ## [1] 5 ## ## [[4]] ## [1] 21 ## ## [[5]] ## [1] 17 ## ## [[6]] ## [1] 98 ## ## [[7]] ## [1] 35 ## ## [[8]] ## [1] 11 ## ## [[9]] ## [1] 13 ## get 2nd element of list new_list[[2]] ## [1] 1 names(new_list) &lt;- paste0(&quot;Patient&quot;, 1 : length(new_list)) new_list ## $Patient1 ## [1] &quot;A&quot; ## ## $Patient2 ## [1] 1 ## ## $Patient3 ## [1] 5 ## ## $Patient4 ## [1] 21 ## ## $Patient5 ## [1] 17 ## ## $Patient6 ## [1] 98 ## ## $Patient7 ## [1] 35 ## ## $Patient8 ## [1] 11 ## ## $Patient9 ## [1] 13 ## get 2nd element of list new_list[[2]] ## [1] 1 2D 6.3.2.6 matrix Create Matrix ## create numeric matrix numeric_matrix &lt;- matrix(sample(1:10, 100, replace = TRUE), nrow = 10, ncol = 10) class(numeric_matrix) ## check class ## [1] &quot;matrix&quot; Check Structure str(numeric_matrix) ## int [1:10, 1:10] 2 7 5 1 10 6 8 7 7 2 ... Get 3rd Row ## get 3rd row numeric_matrix[3, ] ## [1] 5 2 3 9 6 3 8 9 3 5 Get 4th Column ## get 4th colum numeric_matrix[, 4] ## [1] 1 6 9 6 4 10 9 4 4 6 6.3.2.7 data.frame Get data.frame ## built in R data.frame iris head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa Check Class class(iris) ## [1] &quot;data.frame&quot; Check Structure str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... Get 3rd Row ## get 3rd row iris[3,] ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 3 4.7 3.2 1.3 0.2 setosa Get 4th Column ## get 4th colum iris[,4] ## [1] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 0.2 0.2 0.1 0.1 0.2 0.4 0.4 0.3 ## [19] 0.3 0.3 0.2 0.4 0.2 0.5 0.2 0.2 0.4 0.2 0.2 0.2 0.2 0.4 0.1 0.2 0.2 0.2 ## [37] 0.2 0.1 0.2 0.2 0.3 0.3 0.2 0.6 0.4 0.3 0.2 0.2 0.2 0.2 1.4 1.5 1.5 1.3 ## [55] 1.5 1.3 1.6 1.0 1.3 1.4 1.0 1.5 1.0 1.4 1.3 1.4 1.5 1.0 1.5 1.1 1.8 1.3 ## [73] 1.5 1.2 1.3 1.4 1.4 1.7 1.5 1.0 1.1 1.0 1.2 1.6 1.5 1.6 1.5 1.3 1.3 1.3 ## [91] 1.2 1.4 1.2 1.0 1.3 1.2 1.3 1.3 1.1 1.3 2.5 1.9 2.1 1.8 2.2 2.1 1.7 1.8 ## [109] 1.8 2.5 2.0 1.9 2.1 2.0 2.4 2.3 1.8 2.2 2.3 1.5 2.3 2.0 2.0 1.8 2.1 1.8 ## [127] 1.8 1.8 2.1 1.6 1.9 2.0 2.2 1.5 1.4 2.3 2.4 1.8 1.8 2.1 2.4 2.3 1.9 2.3 ## [145] 2.5 2.3 1.9 2.0 2.3 1.8 Get 3rd Row ## get 3rd row numeric_matrix[3, ] ## [1] 5 2 3 9 6 3 8 9 3 5 Get Species Variable ## get variable iris$Species ## [1] setosa setosa setosa setosa setosa setosa ## [7] setosa setosa setosa setosa setosa setosa ## [13] setosa setosa setosa setosa setosa setosa ## [19] setosa setosa setosa setosa setosa setosa ## [25] setosa setosa setosa setosa setosa setosa ## [31] setosa setosa setosa setosa setosa setosa ## [37] setosa setosa setosa setosa setosa setosa ## [43] setosa setosa setosa setosa setosa setosa ## [49] setosa setosa versicolor versicolor versicolor versicolor ## [55] versicolor versicolor versicolor versicolor versicolor versicolor ## [61] versicolor versicolor versicolor versicolor versicolor versicolor ## [67] versicolor versicolor versicolor versicolor versicolor versicolor ## [73] versicolor versicolor versicolor versicolor versicolor versicolor ## [79] versicolor versicolor versicolor versicolor versicolor versicolor ## [85] versicolor versicolor versicolor versicolor versicolor versicolor ## [91] versicolor versicolor versicolor versicolor versicolor versicolor ## [97] versicolor versicolor versicolor versicolor virginica virginica ## [103] virginica virginica virginica virginica virginica virginica ## [109] virginica virginica virginica virginica virginica virginica ## [115] virginica virginica virginica virginica virginica virginica ## [121] virginica virginica virginica virginica virginica virginica ## [127] virginica virginica virginica virginica virginica virginica ## [133] virginica virginica virginica virginica virginica virginica ## [139] virginica virginica virginica virginica virginica virginica ## [145] virginica virginica virginica virginica virginica virginica ## Levels: setosa versicolor virginica 6.3.3 Detour to S3/S4 S3 most of R uses Bioconductor requires R packages to be written as S4 objects OO field guide Closer to a typical programming language Classes/Methods and Generics Lots of Generics implemented for Bioinformatics! Different way to access values. Need to use the @ symbol instead of $ (@ is equivalent to $, and slot() to [[.) ## example object@ 6.3.3.1 Sparse Matrix Triplet format for storing a matrix row, column, value i, p, x Different from base R. Uses the S4 methods that Bioconductor uses. sparse_matrix &lt;- pbmc_small@assays$RNA@data[1:10, ] class(sparse_matrix) ith row - 1 sparse_matrix@i pth column - 1 sparse_matrix@p value sparse_matrix@x Get First Value sparse_matrix[2,1] dense matrix dense_matrix &lt;- as.matrix(sparse_matrix) class(dense_matrix) str(dense_matrix) Get First Value dense_matrix[2,1] 6.3.3.2 Functions create_function &lt;- function(x, y) { } 6.3.3.3 Reading Files ## read csv files read.csv(&quot;PATH/TO/FILENAME.csv&quot;) ## read tsv files read.delim(&quot;PATH/TO/FILENAME.tsv&quot;, sep = &#39;\\t&#39;) 6.4 More information You can get more information about any R commands relevant to these datatypes using by typing ?function in an interactive session. 6.4.1 Checking for help for any function! start with a ? (this indicates you need the help menu) then the function name to get help on library(ggplot2) ?ggplot ## ggplot is a function, how do we use it? 6.5 Grammer of Graphics (ggplot2) 6.5.1 What is ggplot2? ggplot2 is an R package designed by Hadley Wickham which facilitates data plotting. In this lab, we will touch briefly on some of the features of the package. If you would like to learn more about how to use ggplot2, we would recommend reading “ggplot2 Elegant graphics for data analysis”, by Hadley Wickham or checking out his original paper on the package Data: Always start with the data, identify the dimensions you want to visualize. Aesthetics: Confirm the axes based on the data dimensions, positions of various data points in the plot. Also check if any form of encoding is needed including size, shape, color and so on which are useful for plotting multiple data dimensions. Scale: Do we need to scale the potential values, use a specific scale to represent multiple values or a range? Geometric objects: These are popularly known as ‘geoms’. This would cover the way we would depict the data points on the visualization. Should it be points, bars, lines and so on? Statistics: Do we need to show some statistical measures in the visualization like measures of central tendency, spread, confidence intervals? Facets: Do we need to create subplots based on specific data dimensions? Coordinate system: What kind of a coordinate system should the visualization be based on — should it be cartesian or polar? 6.5.2 Principles of ggplot2 Your data must be a dataframe if you want to plot it using ggplot2. Use the aes mapping function to specify how variables in the dataframe map to features on your plot Use geoms to specify how your data should be represented on your graph eg. as a scatterplot, a barplot, a boxplot etc. Data: Always start with the data, identify the dimensions you want to visualize. library(Seurat) library(ggplot2) gbm &lt;- pbmc_small@assays$RNA@data gbm &lt;- as.data.frame(as.matrix(t(gbm))) new_plot &lt;- ggplot(gbm) Aesthetics: Confirm the axes based on the data dimensions, positions of various data points in the plot. Also check if any form of encoding is needed including size, shape, color and so on which are useful for plotting multiple data dimensions. 1D Plots new_plot_1dx &lt;- ggplot(gbm, aes(x = MS4A1)) new_plot_1dx Scale: Do we need to scale the potential values, use a specific scale to represent multiple values or a range? Geometric objects: These are popularly known as ‘geoms’. This would cover the way we would depict the data points on the visualization. Should it be points, bars, lines and so on? ## ggplot(gbm, aes(x = MS4A1)) + geom_histogram() ## or ## new_plot_1dx &lt;- new_plot_1dx + geom_histogram() ## reassign new_plot_1dx + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 6.5.2.1 Lab A Use different geom_ to make a different plots - try _bar() - try _density() new_plot_1dx + geom_density() Statistics: Do we need to show some statistical measures in the visualization like measures of central tendency, spread, confidence intervals? ggplot(gbm, aes(x = MS4A1)) + geom_histogram() + stat_bin(bins = 10) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2D Plots new_plot_2d &lt;- ggplot(gbm, aes(x = MS4A1, y = CD79B)) ## scatter plot new_plot_2d + geom_point() 6.5.2.2 Lab B Use different geom_ to make a different plots - try _bar_abline() - try _bin2d() new_plot_2d Adding Statisitics in 2D plots Regression line (lm - linear model using OLS regression) ggplot(gbm, aes(MS4A1, CD79B)) + geom_point() + stat_smooth(method = &quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Adding Text Labels ## notice plus `+` at the end of each line, adding a new layer! ggplot(gbm, aes(MS4A1, CD79B)) + ## Data layer geom_point() + ## Geometry layer stat_smooth(method = &quot;lm&quot;) + ## geom_text(aes(label = rownames(gbm))) ## `geom_smooth()` using formula &#39;y ~ x&#39; 6.5.2.3 Lab C Play arund with ggplot2. See what geoms to add and layers to include. ggplot(gbm, aes(x = MS4A1, y = CD79B)) 6.6 Reference R for Data Science Advanced R Bioconductor Workflows Bioconductor Presentation Original ggplot2 paper ggplot2 reference ggplot2 cheatsheet blog post Hemberg Lab "],
["quality-control.html", "7 Quality Control 7.1 Slides", " 7 Quality Control 7.1 Slides "],
["data-wrangling-scrnaseq.html", "8 Data Wrangling scRNAseq 8.1 Goal 8.2 Introduction 8.3 Filtering low-quality cells 8.4 Beginning with Seurat: http://satijalab.org/seurat/ 8.5 Preprocessing step 1 : Filter out low-quality cells 8.6 Examine contents of Seurat object 8.7 Detection of variable genes across the single cells 8.8 Gene set expression across cells", " 8 Data Wrangling scRNAseq 8.1 Goal To give you experience with the analysis of single cell RNA sequencing (scRNA-seq) including performing quality control and identifying cell type subsets. To introduce you to scRNA-seq analysis using the Seurat package. 8.2 Introduction Data produced in a single cell RNA-seq experiment has several interesting characteristics that make it distinct from data produced in a bulk population RNA-seq experiment. Two characteristics that are important to keep in mind when working with scRNA-Seq are drop-out (the excessive amount of zeros due to limiting mRNA) and the potential for quality control (QC) metrics to be confounded with biology. This combined with the ability to measure heterogeniety from cells in samples has shifted the field away from the typical analysis in population-based RNA-Seq. Here we demonstrate some approaches to quality control, followed by identifying and analyzing cell subsets. For this tutorial, we will be analyzing the a dataset of Non-Small Cell Lung Cancer Cells (NSCLC) freely available from 10X Genomics (https://support.10xgenomics.com/single-cell-vdj/datasets/2.2.0/vdj_v1_hs_nsclc_5gex), using the Seurat R package (http://satijalab.org/seurat/), a popular and powerful set of tools to conduct scRNA-seq analysis in R. In this dataset, there are 7802 single cells that were sequenced on the Illumina NovaSeq 6000. Please note this tutorial borrows heavily from Seurat’s tutorials, so feel free to go through them in more detail. 8.2.1 Load necessary packages When loading libraries, we are asking R to load code for us written by someone else. It is a convenient way to leverage and reproduce methodology developed by others. library(Seurat) library(dplyr) library(Matrix) library(gdata) 8.2.2 Read in NSCLC counts matrix. The data for Non-Small Cell Lung Cancer Cells (NSCLC) is freely available from 10X Genomics (https://support.10xgenomics.com/single-cell-vdj/datasets/2.2.0/vdj_v1_hs_nsclc_5gex). We start by reading in the counts matrix generated by the Cell Ranger count program. Task: Change the directory name to read your data dirname &lt;- &quot;data/&quot; counts_matrix_filename = paste0(dirname,&quot;/filtered_gene_bc_matrices/GRCh38/&quot;) counts &lt;- Read10X(data.dir = counts_matrix_filename) # Seurat function to read in 10x count data # To minimize memory use on the docker - choose only the first 1000 cells counts &lt;- counts[,1:1000] 8.2.3 Let’s examine the sparse counts matrix counts[1:10, 1:3] ## 10 x 3 sparse Matrix of class &quot;dgCMatrix&quot; ## AAACCTGAGCTAGTCT AAACCTGAGGGCACTA AAACCTGAGTACGTTC ## RP11-34P13.3 . . . ## FAM138A . . . ## OR4F5 . . . ## RP11-34P13.7 . . . ## RP11-34P13.8 . . . ## RP11-34P13.14 . . . ## RP11-34P13.9 . . . ## FO538757.3 . . . ## FO538757.2 . . . ## AP006222.2 . . . Here we see the upper left corner of the sparse matrix. The columns are indexed by 10x cell barcodes (each 16 nt long), and the rows are the gene names. We mentioned these matrices are sparse, here we see only zeroes (indicated by the “.” symbol); this is the most common value in these sparse matrices. Next, let us look at the dimensions of this matrix. 8.2.4 How big is the matrix? dim(counts) # report number of genes (rows) and number of cells (columns) ## [1] 33694 1000 Here we see the counts matrix has 33694 genes and 7802 cells. 8.2.5 How much memory does a sparse matrix take up relative to a dense matrix? object.size(counts) # size in bytes ## 23923312 bytes object.size(as.matrix(counts)) # size in bytes ## 271919144 bytes We see here that the sparse matrix takes 225 Mb in memory while storing the matrix in a dense format (where all count values including zeros are stored) takes almost 10 times as much memory! This memory saving is very important, especially as data sets are now being created that are beyond a million cells. These matrices can become unmanageable without special computing resources. In the sparse representation, we assume that the majority of count values in a matrix are zero. We only store the non-zero values. This is implemented in the Matrix package using a dgTMatrix object. 8.3 Filtering low-quality cells You can learn a lot about your scRNA-seq data’s quality with simple plotting. Let’s do some plotting to look at the number of reads per cell, reads per genes, expressed genes per cell (often called complexity), and rarity of genes (cells expressing genes). 8.3.1 Look at the summary counts for genes and cells counts_per_cell &lt;- Matrix::colSums(counts) counts_per_gene &lt;- Matrix::rowSums(counts) genes_per_cell &lt;- Matrix::colSums(counts&gt;0) # count gene only if it has non-zero reads mapped. Task: In a similar way, can you calculate cells per genes? replace the ‘?’ in the command below cells_per_gene &lt;- Matrix::?(counts&gt;?) # only count cells where the gene is expressed colSums and rowSums are functions that work on each row or column in a matrix and return the column sums or row sums as a vector. If this is true counts_per_cell should have 1 entry per cell. Let’s make sure the length of the returned vector matches the matrix dimension for column. How would you do that? ( Hint:length() ). Notes: 1. Matrix::colSums is a way to force functions from the Matrix library to be used. There are many libraries that implement colSums, we are forcing the one from the Matrix library to be used here to make sure it handles the dgTmatrix (sparse matrix) correctly. This is good practice. hist(log10(counts_per_cell+1),main=&#39;counts per cell&#39;,col=&#39;wheat&#39;) hist(log10(genes_per_cell+1), main=&#39;genes per cell&#39;, col=&#39;wheat&#39;) plot(counts_per_cell, genes_per_cell, log=&#39;xy&#39;, col=&#39;wheat&#39;) title(&#39;counts vs genes per cell&#39;) Here we see examples of plotting a new plot, the histogram. R makes this really easy with the hist function. We are also transforming the values to log10 before plotting, this is done with the log10 method. When logging count data, the + 1 is used to avoid log10(0) which is not defined. Can you a histogram of counts per gene in log10 scale? hist(?(?+1), main=&#39;counts per gene&#39;, col=&#39;wheat&#39;) 8.3.2 Plot cells ranked by their number of detected genes. Here we rank each cell by its library complexity, ie the number of genes detected per cell. This is a very useful plot as it shows the distribution of library complexity in the sequencing run. One can use this plot to investigate observations (potential cells) that are actually failed libraries (lower end outliers) or observations that are cell doublets (higher end outliers). plot(sort(genes_per_cell), xlab=&#39;cell&#39;, log=&#39;y&#39;, main=&#39;genes per cell (ordered)&#39;) 8.4 Beginning with Seurat: http://satijalab.org/seurat/ 8.4.1 Creating a seurat object To analyze our single cell data we will use a seurat object. Can you create an Seurat object with the 10x data and save it in an object called ‘seurat’? hint: CreateSeuratObject(). Can you include only genes that are are expressed in 3 or more cells and cells with complexity of 350 genes or more? How many genes are you left with? How many cells? seurat&lt;-CreateSeuratObject(counts = counts, min.cells = 3, min.features = 350, project = &quot;10X_NSCLC&quot;) ## Warning: Feature names cannot have underscores (&#39;_&#39;), replacing with dashes ## (&#39;-&#39;) Almost all our analysis will be on the single object, of class Seurat. This object contains various “slots” (designated by seurat@slotname) that will store not only the raw count data, but also the results from various computations below. This has the advantage that we do not need to keep track of inidividual variables of interest - they can all be collapsed into a single object as long as these slots are pre-defined. The Assay class stores single cell data. For typical scRNA-seq experiments, a Seurat object will have a single Assay (“RNA”). This assay will also store multiple ‘transformations’ of the data, including raw counts ((???) slot), normalized data ((???) slot), and scaled data for dimensional reduction ((???) slot). seurat@assays$RNA is a slot that stores the original gene count matrix. We can view the first 10 rows (genes) and the first 10 columns (cells). seurat@assays$RNA@counts[1:10, 1:10] ## 10 x 10 sparse Matrix of class &quot;dgCMatrix&quot; ## [[ suppressing 10 column names &#39;AAACCTGAGCTAGTCT&#39;, &#39;AAACCTGAGGGCACTA&#39;, &#39;AAACCTGAGTACGTTC&#39; ... ]] ## ## FO538757.2 . . . . 1 2 . . . . ## RP4-669L17.10 . . . . . . . . . . ## RP11-206L10.9 . . . . . . . . . . ## LINC00115 . . . . . . . . . . ## NOC2L . . . . 2 4 . 1 . . ## KLHL17 . . . . . . . . . . ## PLEKHN1 . . . . . . . . . . ## HES4 . . . . . 9 . . . 1 ## ISG15 . . . . 1 1 . . 1 . ## AGRN . . . . . . . . . . 8.5 Preprocessing step 1 : Filter out low-quality cells The Seurat object initialization step above only considered cells that expressed at least 350 genes. Additionally, we would like to exclude cells that are damaged. A common metric to judge this (although by no means the only one) is the relative expression of mitochondrially derived genes. When the cells apoptose due to stress, their mitochondria becomes leaky and there is widespread RNA degradation. Thus a relative enrichment of mitochondrially derived genes can be a tell-tale sign of cell stress. Here, we compute the proportion of transcripts that are of mitochondrial origin for every cell (percent.mito), and visualize its distribution as a violin plot. We also use the GenePlot function to observe how percent.mito correlates with other metrics. # The number of genes and UMIs (nGene and nUMI) are automatically calculated # for every object by Seurat. For non-UMI data, nUMI represents the sum of # the non-normalized values within a cell We calculate the percentage of # mitochondrial genes here and store it in percent.mito using AddMetaData. # We use object@raw.data since this represents non-transformed and # non-log-normalized counts The % of UMI mapping to MT-genes is a common # scRNA-seq QC metric. mito.genes &lt;- grep(pattern = &quot;^MT-&quot;, x = rownames(x = seurat@assays$RNA@data), value = TRUE) percent.mito &lt;- Matrix::colSums(seurat@assays$RNA@data[mito.genes, ])/Matrix::colSums(seurat@assays$RNA@data) # AddMetaData adds columns to object@meta.data, and is a great place to stash QC stats. # This also allows us to plot the metadata values using the Seurat&#39;s VlnPlot(). head(seurat@meta.data) # Before adding ## orig.ident nCount_RNA nFeature_RNA ## AAACCTGAGCTAGTCT 10X_NSCLC 3605 1184 ## AAACCTGAGGGCACTA 10X_NSCLC 3828 1387 ## AAACCTGAGTACGTTC 10X_NSCLC 6452 1783 ## AAACCTGAGTCCGGTC 10X_NSCLC 3071 1088 ## AAACCTGCACCAGGTC 10X_NSCLC 9389 2616 ## AAACCTGCACCTCGTT 10X_NSCLC 48827 5591 Task: Can you add the percentage if mitochondrial genes to the seurat object meta data? If you dont remember the name of the parameter you can type ?AddMetaData in the console. An alternative way to add meta data is by using: seurat[[“percent.mito”]] &lt;- PercentageFeatureSet(seurat, pattern = “^MT-”) seurat &lt;- AddMetaData(object = seurat, ? = percent.mito, col.name = &quot;percent.mito&quot;) head(seurat@meta.data) # After adding VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mito&quot;)) Here we calculated the percent mitochondrial reads and added it to the Seurat object in the slot named meta.data. This allowed us to plot using the violin plot function provided by Seurat. A third metric we use is the number of house keeping genes expressed in a cell. These genes reflect commomn processes active in a cell and hence are a good global quality measure. They are also abundant and are usually steadliy expressed in cells, thus less sensitive to the high dropout. # Load the the list of house keeping genes hkgenes &lt;- read.table(&quot;data/resources/tirosh_house_keeping.txt&quot;, skip = 2) hkgenes &lt;- as.vector(hkgenes$V1) # remove hkgenes that were not found hkgenes.found &lt;- which(toupper(rownames(seurat@assays$RNA@data)) %in% hkgenes) Task: 1. Sum the number of detected house keeping genes for each cell 2. Add this information as meta data to seurat 3. plot all metrics: “nGene”, “nUMI”, “percent.mito”,“n.exp.hkgenes” using VlnPlot n.expressed.hkgenes &lt;- ?(seurat@assays$RNA@data[hkgenes.found, ] &gt; 0) seurat &lt;- AddMetaData(object = ?, ? = ?, col.name = &quot;n.exp.hkgenes&quot;) VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mito&quot;,&quot;n.exp.hkgenes&quot;), ncol = 4) Is there a correlation between the measurements? For example, number of UMIs with number of genes? Can you plot the nGene vs nUMI? What is the correlation? Do you see a strange subpopulation? What do you think happened with these cells? FeatureScatter(object = seurat, feature1 = ?, feature2 = ?) 8.6 Examine contents of Seurat object str(seurat) These are the slots in the Seurat object. Some of the slots are automatically updated by Seurat as you move through analysis. Take a moment to look through the information, knowing the slots allow you to leverage work Seurat has already done for you. VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;), group.by = c(&#39;orig.ident&#39;)) Here we plot the number of genes per cell by what Seurat calls orig.ident. Identity is a concept that is used in the Seurat object to refer to the cell identity. In this case, the cell identity is 10X_NSCLC, but after we cluster the cells, the cell identity will be whatever cluster the cell belongs to. We will see how identity updates as we go throught the analysis. Next, let’s filter the cells based on the quality control metrics. Filter based on: 1. nFeature_RNA 2. percent.mito 3. n.exp.hkgenes Task: Change the thresholds to what you think they should be according to the violin plots VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;,&quot;percent.mito&quot;,&quot;n.exp.hkgenes&quot;), ncol = 3) ## Warning in FetchData(object = object, vars = features, slot = slot): The ## following requested variables were not found: percent.mito, n.exp.hkgenes seurat &lt;- subset(seurat, subset = nFeature_RNA &gt; 350 &amp; nFeature_RNA &lt; 4000 &amp; percent.mito &lt; 0.15 &amp; n.exp.hkgenes &gt; 55) How many cells are you left with? seurat ## An object of class Seurat ## 16145 features across 907 samples within 1 assay ## Active assay: RNA (16145 features) 8.6.1 Preprocessing step 2 : Expression normalization After removing unwanted genes cells from the dataset, the next step is to normalize the data. By default, we employ a global-scaling normalization method “LogNormalize” that normalizes the gene expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. There have been many methods to normalize the data, but this is the simplest and the most intuitive. The division by total expression is done to change all expression counts to a relative measure, since experience has suggested that technical factors (e.g. capture rate, efficiency of reverse transcription) are largely responsible for the variation in the number of molecules per cell, although genuine biological factors (e.g. cell cycle stage, cell size) also play a smaller, but non-negligible role. The log-transformation is a commonly used transformation that has many desirable properties, such as variance stabilization (can you think of others?). seurat &lt;- NormalizeData(object = seurat, normalization.method = &quot;LogNormalize&quot;, scale.factor = 1e4) Well there you have it! A filtered and normalized gene-expression data set. A great accomplishment for your first dive into scRNA-Seq analysis. Well done! 8.7 Detection of variable genes across the single cells Seurat calculates highly variable genes and focuses on these for downstream analysis. FindVariableFeatures calculates the average expression and dispersion for each gene, places these genes into bins, and then calculates a z-score for dispersion within each bin. This helps control for the relationship between variability and average expression. seurat &lt;- FindVariableFeatures(seurat, selection.method = &quot;vst&quot;, nfeatures = 2000) # Identify the 10 most highly variable genes top10 &lt;- head(VariableFeatures(seurat), 10) # plot variable features with and without labels plot1 &lt;- VariableFeaturePlot(seurat) plot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE, xnudge = 0, ynudge = 0) ## Warning: Using `as.character()` on a quosure is deprecated as of rlang 0.3.0. ## Please use `as_label()` or `as_name()` instead. ## This warning is displayed once per session. plot1 + plot2 8.8 Gene set expression across cells Sometimes we want to ask what is the expression of a set of a genes across cells. This set of genes may make up a gene expression program we are interested in. Another benefit at looking at gene sets is it reduces the effects of drop outs. Below, we look at genes involved in: T cells, the cell cycle and the stress signature upon cell dissociation. We calculate these genes average expression levels on the single cell level, while controlling for technical effects. # Read in a list of cell cycle markers, from Tirosh et al, 2015. # We can segregate this list into markers of G2/M phase and markers of S phase. cc.genes &lt;- readLines(&quot;data/resources/regev_lab_cell_cycle_genes.txt&quot;) s.genes &lt;- cc.genes[1:43] g2m.genes &lt;- cc.genes[44:97] seurat &lt;- CellCycleScoring(seurat, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE) ## Warning: The following features are not present in the object: MLF1IP, not ## searching for symbol synonyms Task: Use markers for dissociation to calculate dissociation score # Genes upregulated during dissociation of tissue into single cells. genes.dissoc &lt;- c(&quot;ATF3&quot;, &quot;BTG2&quot;, &quot;CEBPB&quot;, &quot;CEBPD&quot;, &quot;CXCL3&quot;, &quot;CXCL2&quot;, &quot;CXCL1&quot;, &quot;DNAJA1&quot;, &quot;DNAJB1&quot;, &quot;DUSP1&quot;, &quot;EGR1&quot;, &quot;FOS&quot;, &quot;FOSB&quot;, &quot;HSP90AA1&quot;, &quot;HSP90AB1&quot;, &quot;HSPA1A&quot;, &quot;HSPA1B&quot;, &quot;HSPA1A&quot;, &quot;HSPA1B&quot;, &quot;HSPA8&quot;, &quot;HSPB1&quot;, &quot;HSPE1&quot;, &quot;HSPH1&quot;, &quot;ID3&quot;, &quot;IER2&quot;, &quot;JUN&quot;, &quot;JUNB&quot;, &quot;JUND&quot;, &quot;MT1X&quot;, &quot;NFKBIA&quot;, &quot;NR4A1&quot;, &quot;PPP1R15A&quot;, &quot;SOCS3&quot;, &quot;ZFP36&quot;) #### seurat &lt;- AddModuleScore(?, genes.list = list(?), ctrl.size = 20, enrich.name = &quot;genes_dissoc&quot;) seurat &lt;- AddModuleScore(seurat, features = list(genes.dissoc), ctrl.size = 20, enrich.name = &quot;genes_dissoc&quot;) Task: Plot the correlation between number of genes and S score. How do we know the name of these scores in the seurat meta data? FeatureScatter(seurat, feature1 = ?, &quot;nFeature_RNA&quot;) Congratulations! You can identify and visualize cell subsets and the marker genes that describe these cell subsets. This is a very powerful analysis pattern often seen in publications. Well done! library(Seurat) library(dplyr) library(Matrix) library(gdata) # read data dirname &lt;- &quot;/home/rstudio/data/&quot; counts_matrix_filename = paste0(dirname,&quot;/filtered_gene_bc_matrices/GRCh38/&quot;) counts &lt;- Read10X(data.dir = counts_matrix_filename) # Seurat function to read in 10x count data # To minimize memory use on the docker - choose only the first 1000 cells counts &lt;- counts[,1:1000] # Let&#39;s examine the sparse counts matrix counts[1:10, 1:3] # How big is the matrix? dim(counts) # report number of genes (rows) and number of cells (columns) # How much memory does a sparse matrix take up relative to a dense matrix? object.size(counts) # size in bytes object.size(as.matrix(counts)) # size in bytes # Look at the summary counts for genes and cells counts_per_cell &lt;- Matrix::colSums(counts) counts_per_gene &lt;- Matrix::rowSums(counts) genes_per_cell &lt;- Matrix::colSums(counts&gt;0) # count gene only if it has non-zero reads mapped. cells_per_gene &lt;- Matrix::rowSums(counts&gt;0) # only count cells where the gene is expressed # plot counts and genes hist(log10(counts_per_cell+1),main=&#39;counts per cell&#39;,col=&#39;wheat&#39;) hist(log10(genes_per_cell+1), main=&#39;genes per cell&#39;, col=&#39;wheat&#39;) plot(counts_per_cell, genes_per_cell, log=&#39;xy&#39;, col=&#39;wheat&#39;) title(&#39;counts vs genes per cell&#39;) # plot a histogram of counts per gene in log10 scale hist(log10(counts_per_gene+1), main=&#39;counts per gene&#39;, col=&#39;wheat&#39;) # Plot cells ranked by their number of detected genes. plot(sort(genes_per_cell), xlab=&#39;cell&#39;, log=&#39;y&#39;, main=&#39;genes per cell (ordered)&#39;) ## Beginning with Seurat: http://satijalab.org/seurat/ # create object seurat&lt;-CreateSeuratObject(counts = counts, min.cells = 3, min.features = 350, project = &quot;10X_NSCLC&quot;) # vcalculate percent pf mitochondria genes mito.genes &lt;- grep(pattern = &quot;^MT-&quot;, x = rownames(x = seurat@assays$RNA@data), value = TRUE) percent.mito &lt;- Matrix::colSums(seurat@assays$RNA@data[mito.genes, ])/Matrix::colSums(seurat@assays$RNA@data) #### seurat &lt;- AddMetaData(object = seurat, ? = percent.mito, col.name = &quot;percent.mito&quot;) seurat &lt;- AddMetaData(object = seurat, metadata = percent.mito, col.name = &quot;percent.mito&quot;) head(seurat@meta.data) # After adding VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mito&quot;)) # Load the the list of house keeping genes hkgenes &lt;- read.table(&quot;/home/rstudio/data/resources/tirosh_house_keeping.txt&quot;, skip = 2) hkgenes &lt;- as.vector(hkgenes$V1) # remove hkgenes that were not found hkgenes.found &lt;- which(toupper(rownames(seurat@assays$RNA@data)) %in% hkgenes) # Add_number_of_house_keeping_genes n.expressed.hkgenes &lt;- Matrix::colSums(seurat@assays$RNA@data[hkgenes.found, ] &gt; 0) seurat &lt;- AddMetaData(object = seurat, metadata = n.expressed.hkgenes, col.name = &quot;n.exp.hkgenes&quot;) VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mito&quot;,&quot;n.exp.hkgenes&quot;), ncol = 4) FeatureScatter(object = seurat, feature1 = &quot;nFeature_RNA&quot;, feature2 = &quot;nCount_RNA&quot;) # plot seurat meta data VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;), group.by = c(&#39;orig.ident&#39;)) VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;,&quot;percent.mito&quot;,&quot;n.exp.hkgenes&quot;), ncol = 3) # filter data seurat &lt;- subset(seurat, subset = nFeature_RNA &gt; 350 &amp; nFeature_RNA &lt; 4000 &amp; percent.mito &lt; 0.15 &amp; n.exp.hkgenes &gt; 55) #normalize seurat &lt;- NormalizeData(object = seurat, normalization.method = &quot;LogNormalize&quot;, scale.factor = 1e4) #find_var_genes seurat &lt;- FindVariableFeatures(seurat, selection.method = &quot;vst&quot;, nfeatures = 2000) # Identify the 10 most highly variable genes top10 &lt;- head(VariableFeatures(seurat), 10) # plot variable features with and without labels plot1 &lt;- VariableFeaturePlot(seurat) plot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE, xnudge = 0, ynudge = 0) plot1 + plot2 #cell_cycle_genes # Read in a list of cell cycle markers, from Tirosh et al, 2015. # We can segregate this list into markers of G2/M phase and markers of S phase. cc.genes &lt;- readLines(&quot;/home/rstudio/data/resources/regev_lab_cell_cycle_genes.txt&quot;) s.genes &lt;- cc.genes[1:43] g2m.genes &lt;- cc.genes[44:97] seurat &lt;- CellCycleScoring(seurat, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE) #dissociation_signature # Genes upregulated during dissociation of tissue into single cells. genes.dissoc &lt;- c(&quot;ATF3&quot;, &quot;BTG2&quot;, &quot;CEBPB&quot;, &quot;CEBPD&quot;, &quot;CXCL3&quot;, &quot;CXCL2&quot;, &quot;CXCL1&quot;, &quot;DNAJA1&quot;, &quot;DNAJB1&quot;, &quot;DUSP1&quot;, &quot;EGR1&quot;, &quot;FOS&quot;, &quot;FOSB&quot;, &quot;HSP90AA1&quot;, &quot;HSP90AB1&quot;, &quot;HSPA1A&quot;, &quot;HSPA1B&quot;, &quot;HSPA1A&quot;, &quot;HSPA1B&quot;, &quot;HSPA8&quot;, &quot;HSPB1&quot;, &quot;HSPE1&quot;, &quot;HSPH1&quot;, &quot;ID3&quot;, &quot;IER2&quot;, &quot;JUN&quot;, &quot;JUNB&quot;, &quot;JUND&quot;, &quot;MT1X&quot;, &quot;NFKBIA&quot;, &quot;NR4A1&quot;, &quot;PPP1R15A&quot;, &quot;SOCS3&quot;, &quot;ZFP36&quot;) seurat &lt;- AddModuleScore(seurat, features = list(genes.dissoc), ctrl.size = 20, enrich.name = &quot;genes_dissoc&quot;) # correlation: cell cycle scoores and number of genes, eval = FALSE} FeatureScatter(seurat, feature1 = &quot;S.Score&quot;, &quot;nFeature_RNA&quot;) "],
["identifying-cell-populations.html", "9 Identifying Cell Populations 9.1 Slides", " 9 Identifying Cell Populations 9.1 Slides "],
["feature-selection-and-cluster-analysis.html", "10 Feature Selection and Cluster Analysis 10.1 Abstract 10.2 Seurat Tutorial Redo 10.3 Feature Selection 10.4 Probabilistic (LDA) Clustering 10.5 Other Options For Analysis", " 10 Feature Selection and Cluster Analysis 10.1 Abstract Many methods have been used to determine differential gene expression from single-cell RNA (scRNA)-seq data. We evaluated 36 approaches using experimental and synthetic data and found considerable differences in the number and characteristics of the genes that are called differentially expressed. Prefiltering of lowly expressed genes has important effects, particularly for some of the methods developed for bulk RNA-seq data analysis. However, we found that bulk RNA-seq analysis methods do not generally perform worse than those developed specifically for scRNA-seq. We also present conquer, a repository of consistently processed, analysis-ready public scRNA-seq data sets that is aimed at simplifying method evaluation and reanalysis of published results. Each data set provides abundance estimates for both genes and transcripts, as well as quality control and exploratory analysis reports. (???) Cells are the basic building blocks of organisms and each cell is unique. Single-cell RNA sequencing has emerged as an indispensable tool to dissect the cellular heterogeneity and decompose tissues into cell types and/or cell states, which offers enormous potential for de novo discovery. Single-cell transcriptomic atlases provide unprecedented resolution to reveal complex cellular events and deepen our understanding of biological systems. In this review, we summarize and compare single-cell RNA sequencing technologies, that were developed since 2009, to facilitate a well-informed choice of method. The applications of these methods in different biological contexts are also discussed. We anticipate an ever-increasing role of single-cell RNA sequencing in biology with further improvement in providing spatial information and coupling to other cellular modalities. In the future, such biological findings will greatly benefit medical research. (???) 10.2 Seurat Tutorial Redo For this tutorial, we will be analyzing the a dataset of Non-Small Cell Lung Cancer Cells (NSCLC) freely available from 10X Genomics (https://support.10xgenomics.com/single-cell-vdj/datasets/2.2.0/vdj_v1_hs_nsclc_5gex), using the Seurat R package (http://satijalab.org/seurat/), a popular and powerful set of tools to conduct scRNA-seq analysis in R. In this dataset, there are 7802 single cells that were sequenced on the Illumina NovaSeq 6000. Please note this tutorial borrows heavily from Seurat’s tutorials, so feel free to go through them in more detail. Task: Check the dirname to directory where you saved your data knitr::opts_knit$set(progress=FALSE, verbose=FALSE) library(Seurat) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(ggplot2) library(CountClust) dirname &lt;- &quot;data/&quot; counts_matrix_filename = paste0(dirname, &quot;filtered_gene_bc_matrices/GRCh38/&quot;) counts &lt;- Read10X(data.dir = counts_matrix_filename) # Seurat function to read in 10x count data ## Using the first 1000 cells for computational efficiency seurat &lt;- CreateSeuratObject(counts = counts, min.cells = 3, min.features = 350, project = &quot;10X_NSCLC&quot;) ## Warning: Feature names cannot have underscores (&#39;_&#39;), replacing with dashes ## (&#39;-&#39;) 10.2.1 Preprocessing Steps This was all covered in Dana’s Lab! # The number of genes and UMIs (nFeature_RNA nCount_RNA) are automatically calculated # for every object by Seurat. For non-UMI data, nCount_RNA represents the sum of # the non-normalized values within a cell We calculate the percentage of # mitochondrial genes here and store it in percent.mito using AddMetaData. # We use object@raw.data since this represents non-transformed and # non-log-normalized counts The % of UMI mapping to MT-genes is a common # scRNA-seq QC metric. # Load the the list of house keeping genes hkgenes &lt;- read.table(&quot;data/resources/tirosh_house_keeping.txt&quot;, skip = 2) hkgenes &lt;- as.vector(hkgenes$V1) # remove hkgenes that were not found hkgenes.found &lt;- which(toupper(rownames(seurat@assays$RNA@data)) %in% hkgenes) n.expressed.hkgenes &lt;- sum(seurat@assays$RNA@data[hkgenes.found, ] &gt; 0) ## Add to Seurat Meta Data seurat &lt;- AddMetaData(object = seurat, metadata = n.expressed.hkgenes, col.name = &quot;n.exp.hkgenes&quot;) seurat[[&quot;percent.mito&quot;]] &lt;- PercentageFeatureSet(object = seurat, pattern = &quot;^MT-&quot;) ##VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), ncol = 3) # FeatureScatter is typically used to visualize gene-gene relationships, but can # be used for anything calculated by the object, i.e. columns in # object@meta.data, PC scores etc. Since there is a rare subset of cells # with an outlier level of high mitochondrial percentage and also low UMI # content, we filter these as well par(mfrow = c(1, 2)) FeatureScatter(object = seurat, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mito&quot;) FeatureScatter(object = seurat, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) # We filter out cells that have unique gene counts over 4,000 or less than # 350 Note that low thresholds and high thresholds are used to define a # &#39;gate&#39;. -Inf and Inf should be used if you don&#39;t want a lower or upper # threshold. seurat &lt;- subset(seurat, subset = nFeature_RNA &gt; 350 &amp; nFeature_RNA &lt; 4000 &amp; percent.mito &lt; 15 &amp; n.exp.hkgenes &gt; 55) seurat &lt;- NormalizeData(object = seurat, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) # Read in a list of cell cycle markers, from Tirosh et al, 2015. # We can segregate this list into markers of G2/M phase and markers of S phase. s.genes &lt;- Seurat::cc.genes$s.genes s.genes &lt;- s.genes[s.genes %in% rownames(seurat)] # genes in dataset g2m.genes &lt;- Seurat::cc.genes$g2m.genes g2m.genes &lt;- g2m.genes[g2m.genes %in% rownames(seurat)] # genes in dataset seurat &lt;- CellCycleScoring(object = seurat, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE) seurat &lt;- FindVariableFeatures(object = seurat, selection.method = &quot;vst&quot;, nfeatures = 2000) 10.2.2 Start of Identifying Cell Types 10.2.2.1 Scaling This part is where you mean center the data, substract the mean. You also divide by the standard deviation to make everything to a ‘standard normal’, where the mean is zero and the standard deviation is 1. seurat &lt;- ScaleData(object = seurat, vars.to.regress = c(&quot;percent.mito&quot;)) ## Regressing out percent.mito ## Centering and scaling data matrix Task: Try Regressing Other Variables set.seed(2020) ## used for reporducibility ## randomly making a batch id data.frame batch_ids &lt;- data.frame(barcode = rownames(seurat@meta.data), batch_id = sample(0:2, NROW(seurat@meta.data), replace = TRUE), stringsAsFactors = FALSE) ## naming batch ids by cell names row.names(batch_ids) &lt;- row.names(seurat@meta.data) ## adding batch ids to the meta data seurat &lt;- AddMetaData(object = seurat, metadata = batch_ids, col.name = NULL) ## try different variables to regress seurat &lt;- ScaleData(object = seurat, vars.to.regress = &#39;??&#39;) 10.2.2.2 Perform linear dimensional reduction (PCA) This will run pca on the just the variable features found. seurat &lt;- RunPCA(object = seurat, features = seurat@assays$RNA@var.features, ndims.print = 1:5, nfeatures.print = 5) ## PC_ 1 ## Positive: CD74, IRF8, IGHA1, CCR7, TNF ## Negative: IFITM3, CST3, KRT7, S100A11, S100A9 ## PC_ 2 ## Positive: LYZ, AIF1, TYROBP, FCER1G, SERPINA1 ## Negative: KRT7, KRT17, SLPI, FXYD3, C19orf33 ## PC_ 3 ## Positive: HLA-DRA, CD74, HLA-DRB1, HLA-DQB1, HLA-DPA1 ## Negative: TPSD1, CPA3, TPSAB1, TPSB2, MS4A2 ## PC_ 4 ## Positive: HLA-DQA1, HLA-DRA, HLA-DQB1, HLA-DPA1, HLA-DPB1 ## Negative: IL32, CD7, GZMA, NKG7, PRF1 ## PC_ 5 ## Positive: S100A12, SPRR1B, S100A8, SPRR2A, RDH10 ## Negative: IGFBP7, GAS6, SFRP1, CALD1, HTRA1 10.2.2.3 Visualizing PCA in Different Ways DimPlot(seurat, reduction = &quot;pca&quot;) 10.2.2.4 Perform linear dimensional reduction (ICA) Task: Try running Independent Component Analysis. If you need help with the inputs try using the ?RunICA menu. seurat &lt;- RunICA() 10.2.2.5 Visualizing ICA in Different Ways DimPlot() # ProjectDim scores each gene in the dataset (including genes not included # in the PCA) based on their correlation with the calculated components. # Though we don&#39;t use this further here, it can be used to identify markers # that are strongly correlated with cellular heterogeneity, but may not have # passed through variable gene selection. The results of the projected PCA # can be explored by setting use.full=T in the functions above seurat &lt;- ProjectDim(object = seurat, reduction = &quot;pca&quot;) ## PC_ 1 ## Positive: CD74, IRF8, IGHA1, CCR7, TNF, ITM2A, CCL5, RP5-887A10.1, RP11-731F5.2, PIM2 ## CD7, HERPUD1, HLA-DQA1, KIAA0125, STAG3, GZMA, KLRB1, HLA-DPA1, AC079767.4, IGKC ## Negative: IFITM3, CST3, KRT7, S100A11, S100A9, TACSTD2, SLPI, GSTP1, LGALS3, APLP2 ## CLDN7, ELF3, GLUL, KRT19, SERINC2, PTGES, S100P, RAC1, FXYD3, S100A6 ## PC_ 2 ## Positive: LYZ, AIF1, TYROBP, FCER1G, SERPINA1, FCGR2A, MS4A6A, CD14, CSF1R, CPVL ## SPI1, CD68, FPR1, FTL, FCGRT, CD163, PILRA, C1orf162, CLEC7A, LILRB2 ## Negative: KRT7, KRT17, SLPI, FXYD3, C19orf33, PERP, ELF3, S100P, TACSTD2, PTGES ## KRT19, RPS18, DSP, LCN2, KRT18, KLF5, CLDN7, SERPINB3, AQP3, GPRC5A ## PC_ 3 ## Positive: HLA-DRA, CD74, HLA-DRB1, HLA-DQB1, HLA-DPA1, HLA-DQA1, HLA-DPB1, IRF8, HLA-DRB5, CD24 ## CYBB, RAB31, FCGR2B, RNASE6, KYNU, S100A12, FCN1, S100A8, S100A9, BCL2A1 ## Negative: TPSD1, CPA3, TPSAB1, TPSB2, MS4A2, GATA2, HPGDS, SLC18A2, KIT, HDC ## RP11-354E11.2, IL1RL1, VWA5A, CNRIP1, RP11-32B5.7, MAOB, CLU, LTC4S, HPGD, RGS13 ## PC_ 4 ## Positive: HLA-DQA1, HLA-DRA, HLA-DQB1, HLA-DPA1, HLA-DPB1, HLA-DRB1, IRF8, CD74, HLA-DRB5, CD24 ## C1orf186, ALOX5, FCGR2B, CD1C, IGHA1, RP5-887A10.1, RP11-731F5.2, HPGDS, DERL3, SLC18A2 ## Negative: IL32, CD7, GZMA, NKG7, PRF1, CCL5, CTSW, CST7, KLRB1, CD8A ## IL2RB, CCL4, KLRD1, GNLY, ID2, MT2A, TRBC1, TIGIT, SIRPG, GZMH ## PC_ 5 ## Positive: S100A12, SPRR1B, S100A8, SPRR2A, RDH10, MUC4, PDZK1IP1, ERO1A, ADGRF1, PRSS22 ## MALAT1, RNF39, S100A9, SLC6A14, SPRR3, SCEL, DHRS9, SLC26A9, ELF3, TMPRSS11D ## Negative: IGFBP7, GAS6, SFRP1, CALD1, HTRA1, SOD3, NNMT, IGFBP4, MSLN, SERPINF1 ## IGFBP2, CAV1, PCSK1, FBLN1, BCAM, DST, ADIRF, CPE, TUSC3, PPP1R14A 10.2.2.6 Genes by PCs DimHeatmap(object = seurat, dims = 1:6, cells = 50, reduction = &quot;pca&quot;, balanced = TRUE) Check other PCs to plot Task: Check other PCs DimHeatmap() seurat &lt;- JackStraw(object = seurat, reduction = &quot;pca&quot;) seurat &lt;- ScoreJackStraw(seurat, dims = 1:20) JackStrawPlot(seurat, dims = 1:20) PCASigGenes(object = seurat, pcs.use = 1, pval.cut = 0.001)[1:20] ElbowPlot(object = seurat, ndims = 30, reduction = &quot;pca&quot;) # save.SNN = T saves the SNN so that the clustering algorithm can be rerun # using the same graph but with a different resolution value (see docs for # full details) set.seed(2020) seurat &lt;- FindNeighbors(object = seurat, dims = 1:10) ## Computing nearest neighbor graph ## Computing SNN seurat &lt;- FindClusters(object = seurat, reduction = &quot;pca&quot;, dims = 1:10, resolution = 0.6, random.seed = 2020) ## Warning: The following arguments are not used: reduction, dims ## Warning: The following arguments are not used: reduction, dims ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 6187 ## Number of edges: 202352 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8875 ## Number of communities: 15 ## Elapsed time: 0 seconds 10.2.3 Run non-linear dimensional reduction (UMAP/tSNE) Seurat offers several non-linear dimensional reduction techniques, such as tSNE and UMAP, to visualize and explore these datasets. The goal of these algorithms is to learn the underlying manifold of the data in order to place similar cells together in low-dimensional space. Cells within the graph-based clusters determined above should co-localize on these dimension reduction plots. As input to the UMAP and tSNE, we suggest using the same PCs as input to the clustering analysis. Task: Look up and tune hyperparameters of the tSNE. (hint: ?RunTSNE) seurat &lt;- RunTSNE(seurat, reduction.use = &quot;pca&quot;, dims.use = 1:10, perplexity=10) # note that you can set do.label=T to help label individual clusters DimPlot(object = seurat, reduction = &quot;tsne&quot;) Task: Try using UMAP for the non-linear dimension reduction technique (hint: ?RunUMAP) set.seed(2020) seurat &lt;- RunUMAP() # note that you can set label=TRUE to help label individual clusters DimPlot() 10.2.3.1 Finding differentially expressed features (cluster biomarkers) Seurat can help you find markers that define clusters via differential expression. By default, it identifes positive and negative markers of a single cluster (specified in ident.1), compared to all other cells. FindAllMarkers automates this process for all clusters, but you can also test groups of clusters vs. each other, or against all cells. The min.pct argument requires a feature to be detected at a minimum percentage in either of the two groups of cells, and the thresh.test argument requires a feature to be differentially expressed (on average) by some amount between the two groups. You can set both of these to 0, but with a dramatic increase in time - since this will test a large number of features that are unlikely to be highly discriminatory. As another option to speed up these computations, max.cells.per.ident can be set. This will downsample each identity class to have no more cells than whatever this is set to. While there is generally going to be a loss in power, the speed increases can be significiant and the most highly differentially expressed features will likely still rise to the top. # find all markers of cluster 1 using default parameters cluster1.markers &lt;- FindMarkers(object = seurat, ident.1 = 1, min.pct = 0.1) head(cluster1.markers) Task: Try tuning different parameters. How does that affect results? # find all markers distinguishing cluster 5 from clusters 0 and 1 cluster5.markers &lt;- FindMarkers(object = seurat, ident.1 = 5, ident.2 = c(0, 1), min.pct = ?? only.pos = ??) head(cluster5.markers) cluster3.markers &lt;- FindMarkers(object = seurat, ident.1 = 3, thresh.use = 0.25, only.pos = TRUE) head(cluster3.markers) VlnPlot(object = seurat, features = c(&quot;MS4A1&quot;, &quot;CD79A&quot;)) # you can plot raw UMI counts as well VlnPlot(object = seurat, features = c(&quot;NKG7&quot;, &quot;PF4&quot;), log = TRUE) # find markers for every cluster compared to all remaining cells, report # only the positive ones nsclc.markers &lt;- FindAllMarkers(object = seurat, only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25) nsclc.markers %&gt;% group_by(cluster) %&gt;% top_n(2, avg_logFC) FeaturePlot(object = seurat, features = c(&quot;MS4A1&quot;, &quot;GNLY&quot;, &quot;CD3E&quot;, &quot;CD14&quot;, &quot;FCER1A&quot;, &quot;FCGR3A&quot;, &quot;LYZ&quot;, &quot;PPBP&quot;, &quot;CD8A&quot;), cols = c(&quot;grey&quot;, &quot;blue&quot;), reduction = &quot;tsne&quot;) top10 &lt;- nsclc.markers %&gt;% group_by(cluster) %&gt;% top_n(10, avg_logFC) # setting slim.col.label to TRUE will print just the cluster IDS instead of # every cell name DoHeatmap(object = seurat, features = top10$gene, label = TRUE) ## pbmc markers # new.cluster.ids &lt;- c(&quot;Memory CD4 T&quot;, &quot;Naive CD4 T&quot;, &quot;CD14+ Mono&quot;, &quot;B&quot;, &quot;CD8 T&quot;, # &quot;FCGR3A+ Mono&quot;, &quot;NK&quot;, &quot;DC&quot;, &quot;Mk&quot;) ## making generic cell type names new.cluster.ids &lt;- paste0(&quot;CellType&quot;, levels(seurat@active.ident)) names(x = new.cluster.ids) &lt;- levels(x = seurat) seurat &lt;- RenameIdents(object = seurat, new.cluster.ids) DimPlot(object = seurat, reduction = &#39;tsne&#39;, label = TRUE, pt.size = 0.5) + NoLegend() 10.2.3.2 Further subdivisions within cell types If you perturb some of our parameter choices above (for example, setting resolution=0.8 or changing the number of PCs), you might see cells subdivide into two groups. You can explore this subdivision to find markers separating the two cell subsets. However, before reclustering (which will overwrite object@ident), we can stash our renamed identities to be easily recovered later. # First lets stash our identities for later seurat[[&quot;ClusterNames_0.6&quot;]] &lt;- Idents(object = seurat) # Note that if you set save.snn=T above, you don&#39;t need to recalculate the # SNN, and can simply put: seurat &lt;- FindClusters(seurat, resolution = 0.8) seurat &lt;- FindClusters(object = seurat, reduction = &quot;pca&quot;, dims = 1:10, resolution = 0.8) ## Warning: The following arguments are not used: reduction, dims ## Warning: The following arguments are not used: reduction, dims ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 6187 ## Number of edges: 202352 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8664 ## Number of communities: 15 ## Elapsed time: 0 seconds ## Warning in BuildSNN(object = object, genes.use = genes.use, reduction.type ## = reduction.type, : Build parameters exactly match those of already ## computed and stored SNN. To force recalculation, set force.recalc to TRUE. # Demonstration of how to plot two tSNE plots side by side, and how to color # points based on different criteria plot1 &lt;- DimPlot(object = seurat, reduction= &quot;tsne&quot;, label = TRUE) + NoLegend() plot2 &lt;- DimPlot(object = seurat, reduction = &quot;tsne&quot;, group.by = &quot;ClusterNames_0.6&quot;, label = TRUE) + NoLegend() # patchwork system plot1 + plot2 # Find discriminating markers cell.markers &lt;- FindMarkers(object = seurat, ident.1 = 0, ident.2 = 1) # Checking some markers found FeaturePlot(object = seurat, features = c(&quot;S100A4&quot;, &quot;CCR7&quot;), cols = c(&quot;green&quot;, &quot;blue&quot;)) 10.3 Feature Selection 10.3.1 Differential Expression Analysis 10.3.1.1 Differential Expression Tests One of the most commonly performed tasks for RNA-seq data is differential gene expression (DE) analysis. Although well-established tools exist for such analysis in bulk RNA-seq data, methods for scRNA-seq data are just emerging. Given the special characteristics of scRNA-seq data, including generally low library sizes, high noise levels and a large fraction of so-called ‘dropout’ events, it is unclear whether DE methods that have been developed for bulk RNA-seq are suitable also for scRNA-seq. Check the help page out for the FindMarkers function by using ?FindMarkers ## Differential expression using t-test FindMarkers(object = seurat, ident.1 = 0, ident.2 = 1, test.use = &quot;t&quot;) Task: Try to use different test for diffential expression analysis (hint: ?FindMarkers) ## Use the help function and run other tests. Do they find similar markers? FindMarkers(object = seurat, ident.1 = 0, ident.2 = 1, test.use = ??) 10.3.2 Check Clusters How do we test the cell types identified? How do we know how reliable they are? Use Classifier to predict cell cluster. See how it predicts using hold out data. reference # Assign the test object a three level attribute groups &lt;- sample(c(&quot;train&quot;, &quot;test&quot;), size = NROW(seurat@meta.data), replace = TRUE, prob = c(0.8, 0.2)) names(groups) &lt;- colnames(seurat) seurat &lt;- AddMetaData(object = seurat, metadata = groups, col.name = &quot;group&quot;) # Find Anchors seurat.list &lt;- SplitObject(seurat, split.by = &quot;group&quot;) seurat.anchors &lt;- FindIntegrationAnchors(object.list = seurat.list, dims = 1:30) ## Computing 2000 integration features ## Scaling features for provided objects ## Finding all pairwise anchors ## Running CCA ## Merging objects ## Finding neighborhoods ## Finding anchors ## Found 4721 anchors ## Filtering anchors ## Retained 4410 anchors ## Extracting within-dataset neighbors seurat.integrated &lt;- IntegrateData(anchorset = seurat.anchors, dims = 1:30) ## Merging dataset 2 into 1 ## Extracting anchors for merged samples ## Finding integration vectors ## Finding integration vector weights ## Integrating data ## Warning: Adding a command log without an assay associated with it seurat.query &lt;- seurat.list[[&quot;train&quot;]] seurat.anchors &lt;- FindTransferAnchors(reference = seurat.integrated, query = seurat.query, dims = 1:30) ## Performing PCA on the provided reference using 2000 features as input. ## Projecting PCA ## Finding neighborhoods ## Finding anchors ## Found 13510 anchors ## Filtering anchors ## Retained 10980 anchors ## Extracting within-dataset neighbors predictions &lt;- TransferData(anchorset = seurat.anchors, refdata = seurat.integrated$ClusterNames_0.6, dims = 1:30) ## Finding integration vectors ## Finding integration vector weights ## Predicting cell labels seurat.query &lt;- AddMetaData(seurat.query, metadata = predictions) table(seurat.query@meta.data$ClusterNames_0.6, seurat.query@meta.data$predicted.id) ## ## 0 1 10 11 12 13 14 2 3 4 5 6 7 8 9 ## 0 1273 0 0 0 0 0 0 23 0 0 0 0 0 0 0 ## 1 0 734 0 0 1 0 0 0 13 1 1 0 0 0 0 ## 2 447 0 0 0 0 1 0 131 0 0 0 0 0 0 0 ## 3 0 44 0 0 0 1 0 0 478 0 0 0 13 0 0 ## 4 1 0 2 0 0 0 0 0 0 407 0 0 0 0 0 ## 5 0 0 0 0 0 0 0 0 0 0 243 5 0 1 0 ## 6 0 0 0 0 0 0 0 0 0 0 2 254 0 3 0 ## 7 0 0 0 0 0 0 0 0 17 0 0 0 174 0 0 ## 8 0 1 0 0 0 0 1 1 1 0 0 2 0 169 1 ## 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 ## 10 1 1 118 0 0 0 0 0 0 8 0 0 0 0 0 ## 11 0 0 0 121 0 0 0 0 0 0 0 0 0 0 0 ## 12 0 51 0 0 13 2 0 1 13 0 0 0 1 0 0 ## 13 10 3 0 0 0 50 0 0 2 0 0 0 0 0 0 ## 14 0 0 0 0 0 0 37 0 0 0 0 0 0 0 0 10.3.3 View Entire Object Structure Notice all the slots and elements added to the object. str(seurat) 10.4 Probabilistic (LDA) Clustering Another type of clustering we can do is a fuzzy or probablistic clustering. This is where cells are not assigned to specifically only one cluster. They get assigned a score for how much the cells belong to each of the clusters (sometimes called topics). This can be helpful for when your dataset continuous processes and/or cellular states as opposed to distinct cell types. 10.4.1 Example LDA in Bulk data(&quot;MouseDeng2014.FitGoM&quot;) names(MouseDeng2014.FitGoM) ## [1] &quot;clust_3&quot; &quot;clust_6&quot; omega &lt;- MouseDeng2014.FitGoM$clust_6$omega annotation &lt;- data.frame( sample_id = paste0(&quot;X&quot;, c(1:NROW(omega))), tissue_label = factor(rownames(omega), levels = rev(c(&quot;zy&quot;, &quot;early2cell&quot;, &quot;mid2cell&quot;, &quot;late2cell&quot;, &quot;4cell&quot;, &quot;8cell&quot;, &quot;16cell&quot;, &quot;earlyblast&quot;, &quot;midblast&quot;, &quot;lateblast&quot;))) ) rownames(omega) &lt;- annotation$sample_id; StructureGGplot(omega = omega, annotation = annotation, palette = RColorBrewer::brewer.pal(8, &quot;Accent&quot;), yaxis_label = &quot;Amplification batch&quot;, order_sample = TRUE, axis_tick = list(axis_ticks_length = .1, axis_ticks_lwd_y = .1, axis_ticks_lwd_x = .1, axis_label_size = 7, axis_label_face = &quot;bold&quot;)) ## Warning: Use of `df_mlt$document` is discouraged. Use `document` instead. ## Warning: Use of `df_mlt$value` is discouraged. Use `value` instead. ## Warning: Use of `df_mlt$topic` is discouraged. Use `topic` instead. 10.4.2 PBMC LDA 10.4.2.1 Fitting the Model set.seed(2020) ## Preprocessing Steps pbmc_small &lt;- NormalizeData(object = pbmc_small, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) pbmc_small &lt;- RunPCA(object = pbmc_small) ## Warning in irlba(A = t(x = object), nv = npcs, ...): You&#39;re computing too large ## a percentage of total singular values, use a standard svd instead. ## PC_ 1 ## Positive: SDPR, PF4, PPBP, TUBB1, CA2, TREML1, MYL9, PGRMC1, RUFY1, PARVB ## VDAC3, IGLL5, AKR1C3, CD1C, RP11-290F20.3, GNLY, S100A8, S100A9, HLA-DQA1, HLA-DPB1 ## Negative: HLA-DPB1, HLA-DQA1, S100A9, S100A8, GNLY, RP11-290F20.3, CD1C, AKR1C3, IGLL5, VDAC3 ## PARVB, RUFY1, PGRMC1, MYL9, TREML1, CA2, TUBB1, PPBP, PF4, SDPR ## PC_ 2 ## Positive: HLA-DPB1, HLA-DQA1, S100A8, S100A9, CD1C, RP11-290F20.3, PARVB, IGLL5, MYL9, SDPR ## PPBP, CA2, RUFY1, TREML1, PF4, TUBB1, PGRMC1, VDAC3, AKR1C3, GNLY ## Negative: GNLY, AKR1C3, VDAC3, PGRMC1, TUBB1, PF4, TREML1, RUFY1, CA2, PPBP ## SDPR, MYL9, IGLL5, PARVB, RP11-290F20.3, CD1C, S100A9, S100A8, HLA-DQA1, HLA-DPB1 ## PC_ 3 ## Positive: S100A9, S100A8, RP11-290F20.3, AKR1C3, PARVB, GNLY, PPBP, PGRMC1, MYL9, TUBB1 ## CA2, TREML1, SDPR, VDAC3, PF4, RUFY1, HLA-DPB1, IGLL5, CD1C, HLA-DQA1 ## Negative: HLA-DQA1, CD1C, IGLL5, HLA-DPB1, RUFY1, PF4, VDAC3, SDPR, TREML1, CA2 ## TUBB1, MYL9, PGRMC1, PPBP, GNLY, PARVB, AKR1C3, RP11-290F20.3, S100A8, S100A9 ## PC_ 4 ## Positive: IGLL5, RP11-290F20.3, VDAC3, PPBP, TUBB1, TREML1, PF4, CA2, PARVB, MYL9 ## SDPR, RUFY1, PGRMC1, S100A9, HLA-DQA1, HLA-DPB1, GNLY, S100A8, AKR1C3, CD1C ## Negative: CD1C, AKR1C3, S100A8, GNLY, HLA-DPB1, HLA-DQA1, S100A9, PGRMC1, RUFY1, SDPR ## MYL9, PARVB, CA2, PF4, TREML1, TUBB1, PPBP, VDAC3, RP11-290F20.3, IGLL5 ## PC_ 5 ## Positive: MYL9, PARVB, IGLL5, TREML1, AKR1C3, PGRMC1, HLA-DPB1, S100A9, TUBB1, PF4 ## SDPR, GNLY, PPBP, S100A8, CA2, HLA-DQA1, CD1C, RUFY1, RP11-290F20.3, VDAC3 ## Negative: VDAC3, RP11-290F20.3, RUFY1, CD1C, HLA-DQA1, CA2, S100A8, PPBP, GNLY, SDPR ## PF4, TUBB1, S100A9, HLA-DPB1, PGRMC1, AKR1C3, TREML1, IGLL5, PARVB, MYL9 pbmc_small &lt;- FindClusters(object = pbmc_small, reduction = &quot;pca&quot;, dims.use = 1:10, resolution = 1, print.output = 0) ## Warning: The following arguments are not used: reduction, dims.use, print.output ## Suggested parameter: dims instead of dims.use; verbose instead of print.output ## Warning: The following arguments are not used: reduction, dims.use, print.output ## Suggested parameter: dims instead of dims.use; verbose instead of print.output ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 80 ## Number of edges: 3124 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.1433 ## Number of communities: 3 ## Elapsed time: 0 seconds ## Warning: Adding a command log without an assay associated with it ## Grab the Raw Count Matrix from Seurat Object ## Needs count matrix pbmc_counts &lt;- as.matrix(pbmc_small@assays$RNA@counts) pbmc_meta &lt;- pbmc_small@meta.data gene_names &lt;- rownames(pbmc_counts) ## Fit LDA Model, called GoM for this R pacakge ## Number of topics to fit is K=4 pbmc_FitGoM &lt;- FitGoM(t(pbmc_counts), K=4) ## options not specified: switching to default BIC, other choice is BF for Bayes factor ## Fitting a Grade of Membership model ## (Taddy M., AISTATS 2012, JMLR 22, ## http://proceedings.mlr.press/v22/taddy12/taddy12.pdf) ## ## Estimating on a 80 samples collection. ## Fit and Bayes Factor Estimation for K = 4 ## log posterior increase: 6685.6, 59.7, done. ## log BF( 4 ) = 10162.23 ## Grab topic scores omega &lt;- data.frame(pbmc_FitGoM$fit$omega) ## Annotate topics, if identies known annotation &lt;- data.frame(sample_id = rownames(omega), tissue_label = paste0(&quot;cluster&quot;, pbmc_small@active.ident)) colnames(omega) &lt;- paste0(&quot;topic&quot;, 1:4) rownames(omega) &lt;- annotation$sample_id; ## Make plot to see topic contribution StructureGGplot(omega = omega, annotation = annotation, palette = RColorBrewer::brewer.pal(4, &quot;Dark2&quot;), yaxis_label = &quot;Cells&quot;, order_sample = TRUE, axis_tick = list(axis_ticks_length = .1, axis_ticks_lwd_y = .1, axis_ticks_lwd_x = .1, axis_label_size = 7, axis_label_face = &quot;bold&quot;)) ## Warning: Use of `df_mlt$document` is discouraged. Use `document` instead. ## Warning: Use of `df_mlt$value` is discouraged. Use `value` instead. ## Warning: Use of `df_mlt$topic` is discouraged. Use `topic` instead. # ## Add Topic Scores to Meta Data Part of the Seurat Object pbmc_small &lt;- AddMetaData(pbmc_small, omega) 10.4.2.2 Summarizing Topic By Cluster pbmc_small@meta.data %&gt;% group_by(RNA_snn_res.1) %&gt;% summarise(topic1 = mean(topic1), topic2 = mean(topic2), topic3 = mean(topic3), topic4 = mean(topic4)) ## # A tibble: 3 x 5 ## RNA_snn_res.1 topic1 topic2 topic3 topic4 ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 0.0771 0.326 0.342 0.255 ## 2 1 0.973 0.0128 0.00660 0.00778 ## 3 2 0.543 0.352 0.103 0.00247 10.4.2.3 Visualizing Topic Scores ## ggplot object, you can add layers p1 &lt;- DimPlot(pbmc_small, reduction = &quot;tsne&quot;) + labs(title = &quot;Resolution 1&quot;) ## return ggplot object p1 p2 &lt;- FeaturePlot(object = pbmc_small, features = c(&quot;topic1&quot;, &quot;topic2&quot;, &quot;topic3&quot;, &quot;topic4&quot;), cols = c(&quot;grey&quot;, &quot;blue&quot;), reduction = &quot;tsne&quot;) ## return ggplot object p2 p1 + p2 10.4.2.4 Extract Top Feature ## Gene scores for each topics theta_mat &lt;- pbmc_FitGoM$fit$theta top_features &lt;- ExtractTopFeatures(theta_mat, top_features=100, method=&quot;poisson&quot;, options=&quot;min&quot;) gene_list &lt;- do.call(rbind, lapply(1:dim(top_features$indices)[1], function(x) gene_names[top_features$indices[x,]])) We tabulate the top 5 genes for these 4 topics out_table &lt;- do.call(rbind, lapply(1:4, function(i) toString(gene_list[i,1:5]))) rownames(out_table) &lt;- paste(&quot;Topic&quot;, c(1:4)) out_table 10.4.3 Practice Visualizing/Embedding 10.4.3.1 tSNE Change the parameter settings for tSNE RunTSNE() 10.4.3.2 UMAP Change the parameter settings for UMAP RunUMAP() 10.5 Other Options For Analysis More Seurat Vignettes Single Cell Analysis Workshop Hemberg Lab Course SingleCellExperiment Scanpy Pegasus "],
["batch-correction-lecture.html", "11 Batch Correction Lecture 11.1 Slides", " 11 Batch Correction Lecture 11.1 Slides "],
["batch-correction-lab.html", "12 Batch Correction Lab 12.1 Load settings and packages 12.2 Read in pancreas expression matrices 12.3 Preparing the individual Seurat objects for each pancreas dataset without batch correction 12.4 Cluster pancreatic datasets without batch correction 12.5 Additional exploration: Regressing out unwanted covariates 12.6 Additional exploration: kBET 12.7 Additional exploration: Seurat 3 12.8 Acknowledgements", " 12 Batch Correction Lab In this lab, we will look at different single cell RNA-seq datasets collected from pancreatic islets. We will look at how different batch correction methods affect our data analysis. Note: you can increase the system memory available to Docker by going to Docker -&gt; Preferences -&gt; Advanced and shifting the Memory slider. 12.1 Load settings and packages knitr::opts_chunk$set(echo = TRUE) library(Seurat) library(Matrix) library(fossil) ## Loading required package: sp ## Loading required package: maps ## Loading required package: shapefiles ## Loading required package: foreign ## ## Attaching package: &#39;shapefiles&#39; ## The following objects are masked from &#39;package:foreign&#39;: ## ## read.dbf, write.dbf library(dplyr) library(plyr) ## ------------------------------------------------------------------------------ ## You have loaded plyr after dplyr - this is likely to cause problems. ## If you need functions from both plyr and dplyr, please load plyr first, then dplyr: ## library(plyr); library(dplyr) ## ------------------------------------------------------------------------------ ## ## Attaching package: &#39;plyr&#39; ## The following object is masked from &#39;package:maps&#39;: ## ## ozone ## The following objects are masked from &#39;package:dplyr&#39;: ## ## arrange, count, desc, failwith, id, mutate, rename, summarise, ## summarize library(liger) ## Loading required package: cowplot ## ## ******************************************************** ## Note: As of version 1.0.0, cowplot does not change the ## default ggplot2 theme anymore. To recover the previous ## behavior, execute: ## theme_set(theme_cowplot()) ## ******************************************************** ## Loading required package: patchwork ## ## Attaching package: &#39;patchwork&#39; ## The following object is masked from &#39;package:cowplot&#39;: ## ## align_plots # Set folder location for saving output files. This is also the same location as input data. mydir &lt;- &quot;data/batch_correction/&quot; setwd(&quot;/home/rstudio/materials/&quot;) # Objects to save. Rda.sparse.path &lt;- paste0(mydir, &quot;pancreas_subsample.Rda&quot;) Rda.path &lt;- paste0(mydir, &quot;pancreas_nobatchcorrect.Rda&quot;) Rda.Seurat3.path &lt;- paste0(mydir, &quot;pancreas_Seurat3.Rda&quot;) Rda.liger.path &lt;- paste0(mydir, &quot;pancreas_liger.Rda&quot;) 12.2 Read in pancreas expression matrices # Read in all four input expression matrices celseq.data &lt;- read.table(paste0(mydir, &quot;pancreas_multi_celseq_expression_matrix.txt.gz&quot;)) celseq2.data &lt;- read.table(paste0(mydir, &quot;pancreas_multi_celseq2_expression_matrix.txt.gz&quot;)) fluidigmc1.data &lt;- read.table(paste0(mydir, &quot;pancreas_multi_fluidigmc1_expression_matrix.txt.gz&quot;)) smartseq2.data &lt;- read.table(paste0(mydir, &quot;pancreas_multi_smartseq2_expression_matrix.txt.gz&quot;)) # Convert to sparse matrices for efficiency celseq.data &lt;- as(as.matrix(celseq.data), &quot;dgCMatrix&quot;) celseq2.data &lt;- as(as.matrix(celseq2.data), &quot;dgCMatrix&quot;) fluidigmc1.data &lt;- as(as.matrix(fluidigmc1.data), &quot;dgCMatrix&quot;) smartseq2.data &lt;- as(as.matrix(smartseq2.data), &quot;dgCMatrix&quot;) 12.3 Preparing the individual Seurat objects for each pancreas dataset without batch correction # What is the size of each single cell RNA-seq dataset? # Briefly describe the technology used to collect each dataset. # Which datasets do you expect to be different and which do you expect to be similar? dim(celseq.data) dim(celseq2.data) dim(fluidigmc1.data) dim(smartseq2.data) # Create and setup Seurat objects for each dataset with the following 6 steps. # 1. CreateSeuratObject # 2. subset # 3. NormalizeData # 4. FindVariableFeatures # 5. ScaleData # 6. Update @meta.data slot in Seurat object with tech column (celseq, celseq2, fluidigmc1, smartseq2) # Look at the distributions of number of genes per cell before and after FilterCells. # CEL-Seq (https://www.cell.com/cell-reports/fulltext/S2211-1247(12)00228-8) # In subset, use low.thresholds = 1750 celseq &lt;- CreateSeuratObject(counts = celseq.data) VlnPlot(celseq, &quot;nFeature_RNA&quot;) celseq &lt;- subset(celseq, subset = nFeature_RNA &gt; 1750) VlnPlot(celseq, &quot;nFeature_RNA&quot;) celseq &lt;- NormalizeData(celseq, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) celseq &lt;- FindVariableFeatures(celseq, selection.method = &quot;vst&quot;, nfeatures = 2000) celseq &lt;- ScaleData(celseq) celseq[[&quot;tech&quot;]] &lt;- &quot;celseq&quot; # CEL-Seq2 https://www.cell.com/molecular-cell/fulltext/S1097-2765(09)00641-8 # In subset, use low.thresholds = 2500. celseq2 &lt;- CreateSeuratObject(counts = celseq2.data) VlnPlot(celseq2, &quot;nFeature_RNA&quot;) celseq2 &lt;- subset(celseq2, subset = nFeature_RNA &gt; 2500) VlnPlot(celseq2, &quot;nFeature_RNA&quot;) celseq2 &lt;- NormalizeData(celseq2, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) celseq2 &lt;- FindVariableFeatures(celseq2, selection.method = &quot;vst&quot;, nfeatures = 2000) celseq2 &lt;- ScaleData(celseq2) celseq2[[&quot;tech&quot;]] &lt;- &quot;celseq2&quot; # Fluidigm C1 # Omit subset function because cells are already high quality. fluidigmc1 &lt;- CreateSeuratObject(counts = fluidigmc1.data) VlnPlot(fluidigmc1, &quot;nFeature_RNA&quot;) fluidigmc1 &lt;- NormalizeData(fluidigmc1, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) fluidigmc1 &lt;- FindVariableFeatures(fluidigmc1, selection.method = &quot;vst&quot;, nfeatures = 2000) fluidigmc1 &lt;- ScaleData(fluidigmc1) fluidigmc1[[&quot;tech&quot;]] &lt;- &quot;fluidigmc1&quot; # SMART-Seq2 # In subset, use low.thresholds = 2500. smartseq2 &lt;- CreateSeuratObject(counts = smartseq2.data) VlnPlot(smartseq2, &quot;nFeature_RNA&quot;) smartseq2 &lt;- subset(smartseq2, subset = nFeature_RNA &gt; 2500) VlnPlot(smartseq2, &quot;nFeature_RNA&quot;) smartseq2 &lt;- NormalizeData(smartseq2, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) smartseq2 &lt;- FindVariableFeatures(smartseq2, selection.method = &quot;vst&quot;, nfeatures = 2000) smartseq2 &lt;- ScaleData(smartseq2) smartseq2[[&quot;tech&quot;]] &lt;- &quot;smartseq2&quot; # This code sub-samples the data in order to speed up calculations and not use too much memory. Idents(celseq) &lt;- &quot;tech&quot; celseq &lt;- subset(celseq, downsample = 500, seed = 1) Idents(celseq2) &lt;- &quot;tech&quot; celseq2 &lt;- subset(celseq2, downsample = 500, seed = 1) Idents(fluidigmc1) &lt;- &quot;tech&quot; fluidigmc1 &lt;- subset(fluidigmc1, downsample = 500, seed = 1) Idents(smartseq2) &lt;- &quot;tech&quot; smartseq2 &lt;- subset(smartseq2, downsample = 500, seed = 1) # Save the sub-sampled Seurat objects save(celseq, celseq2, fluidigmc1, smartseq2, file = Rda.sparse.path) 12.4 Cluster pancreatic datasets without batch correction Let us cluster all the pancreatic islet datasets together and see whether there is a batch effect. load(Rda.sparse.path) # Merge Seurat objects. Original sample identities are stored in gcdata[[&quot;tech&quot;]]. # Cell names will now have the format tech_cellID (smartseq2_cell1...) add.cell.ids &lt;- c(&quot;celseq&quot;, &quot;celseq2&quot;, &quot;fluidigmc1&quot;, &quot;smartseq2&quot;) gcdata &lt;- merge(x = celseq, y = list(celseq2, fluidigmc1, smartseq2), add.cell.ids = add.cell.ids, merge.data = FALSE) Idents(gcdata) &lt;- &quot;tech&quot; # use identity based on sample identity # Look at how the number of genes per cell varies across the different technologies. VlnPlot(gcdata, &quot;nFeature_RNA&quot;, group.by = &quot;tech&quot;) # The merged data must be normalized and scaled (but you only need to scale the variable genes). # Let us also find the variable genes again this time using all the pancreas data. gcdata &lt;- NormalizeData(gcdata, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) var.genes &lt;- SelectIntegrationFeatures(SplitObject(gcdata, split.by = &quot;tech&quot;), nfeatures = 2000, verbose = TRUE, fvf.nfeatures = 2000, selection.method = &quot;vst&quot;) ## No variable features found for object1 in the object.list. Running FindVariableFeatures ... ## No variable features found for object2 in the object.list. Running FindVariableFeatures ... ## No variable features found for object3 in the object.list. Running FindVariableFeatures ... ## No variable features found for object4 in the object.list. Running FindVariableFeatures ... VariableFeatures(gcdata) &lt;- var.genes gcdata &lt;- ScaleData(gcdata, features = VariableFeatures(gcdata)) ## Centering and scaling data matrix # Do PCA on data including only the variable genes. gcdata &lt;- RunPCA(gcdata, features = VariableFeatures(gcdata), npcs = 40, ndims.print = 1:5, nfeatures.print = 5) ## PC_ 1 ## Positive: CHGB, SCG2, PAM, ABCC8, MIR7-3HG ## Negative: IFITM3, ZFP36L1, TACSTD2, LGALS3, ANXA4 ## PC_ 2 ## Positive: COL1A2, SPARC, COL5A1, COL3A1, SFRP2 ## Negative: ELF3, KRT8, CD24, ATP1B1, SERPINA3 ## PC_ 3 ## Positive: HIF1A, CTSD, ITGB6, PEMT, DHRS3 ## Negative: LOC100131257, PGM5P2, UGDH-AS1, MAB21L3, LOC643406 ## PC_ 4 ## Positive: CPA2, CTRC, CTRB2, PLA2G1B, CTRB1 ## Negative: CFTR, VTCN1, AQP1, TINAGL1, ALDH1A3 ## PC_ 5 ## Positive: GC, TM4SF4, IRX2, TMEM176A, ARX ## Negative: PFKFB2, HADH, INS, IAPP, ADCYAP1 # Color the PC biplot by the scRNA-seq technology. Hint: use DimPlot # Which technologies look similar to one another? DimPlot(gcdata, reduction = &quot;pca&quot;, dims = c(1, 2), group.by = &quot;tech&quot;) # Cluster the cells using the first twenty principal components. gcdata &lt;- FindNeighbors(gcdata, reduction = &quot;pca&quot;, dims = 1:20, k.param = 20) ## Computing nearest neighbor graph ## Computing SNN gcdata &lt;- FindClusters(gcdata, resolution = 0.8, algorithm = 1, random.seed = 100) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 2000 ## Number of edges: 60309 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.9169 ## Number of communities: 17 ## Elapsed time: 0 seconds # Create a UMAP visualization. gcdata &lt;- RunUMAP(gcdata, dims = 1:20, reduction = &quot;pca&quot;, n.neighbors = 15, min.dist = 0.5, spread = 1, metric = &quot;euclidean&quot;, seed.use = 1) ## Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric ## To use Python UMAP via reticulate, set umap.method to &#39;umap-learn&#39; and metric to &#39;correlation&#39; ## This message will be shown once per session ## 19:58:49 UMAP embedding parameters a = 0.583 b = 1.334 ## 19:58:49 Read 2000 rows and found 20 numeric columns ## 19:58:49 Using FNN for neighbor search, n_neighbors = 15 ## 19:58:49 Commencing smooth kNN distance calibration using 1 thread ## 19:58:50 Initializing from normalized Laplacian + noise ## 19:58:50 Commencing optimization for 500 epochs, with 39212 positive edges ## 19:58:52 Optimization finished # Visualize the Louvain clustering and the batches on the UMAP. # Remember, the clustering is stored in @meta.data in column seurat_clusters and the technology is # stored in the column tech. Remember you can also use DimPlot DimPlot(gcdata, reduction = &quot;umap&quot;, group.by = &quot;seurat_clusters&quot;) DimPlot(gcdata, reduction = &quot;umap&quot;, group.by = &quot;tech&quot;) # Are you surprised by the results? Compare to your expectations from the PC biplot of PC1 vs PC2. # What explains these results? # Adjusted rand index test for overlap between technology and cluster labelings. # This goes between 0 (completely dissimilar clustering) to 1 (identical clustering). # The adjustment corrects for chance grouping between cluster elements. # https://davetang.org/muse/2017/09/21/adjusted-rand-index/ ari &lt;- dplyr::select(gcdata[[]], tech, seurat_clusters) ari$tech &lt;- plyr::mapvalues(ari$tech, from = c(&quot;celseq&quot;, &quot;celseq2&quot;, &quot;fluidigmc1&quot;, &quot;smartseq2&quot;), to = c(0, 1, 2, 3)) adj.rand.index(as.numeric(ari$tech), as.numeric(ari$seurat_clusters)) ## [1] 0.7817657 # Save current progress. save(gcdata, file = Rda.path) # To load the data, run the following command. # load(Rda.path) 12.4.1 Batch correction: canonical correlation analysis (CCA) + mutual nearest neighbors (MNN) using Seurat v3 Here we use Seurat v3 to see to what extent it can remove potential batch effects. # load(Rda.sparse.path) # The first piece of code will identify variable genes that are highly variable in at least 2/4 datasets. We will use these variable genes in our batch correction. # Why would we implement such a requirement? ob.list &lt;- list(celseq, celseq2, fluidigmc1, smartseq2) # Identify anchors on the 4 pancreatic islet datasets, commonly shared variable genes across samples, # and integrate samples. gcdata.anchors &lt;- FindIntegrationAnchors(object.list = ob.list, anchor.features = 2000, dims = 1:30) ## Computing 2000 integration features ## Scaling features for provided objects ## Finding all pairwise anchors ## Running CCA ## Merging objects ## Finding neighborhoods ## Finding anchors ## Found 1569 anchors ## Filtering anchors ## Retained 1486 anchors ## Extracting within-dataset neighbors ## Running CCA ## Merging objects ## Finding neighborhoods ## Finding anchors ## Found 1481 anchors ## Filtering anchors ## Retained 1273 anchors ## Extracting within-dataset neighbors ## Running CCA ## Merging objects ## Finding neighborhoods ## Finding anchors ## Found 1621 anchors ## Filtering anchors ## Retained 1450 anchors ## Extracting within-dataset neighbors ## Running CCA ## Merging objects ## Finding neighborhoods ## Finding anchors ## Found 1554 anchors ## Filtering anchors ## Retained 1413 anchors ## Extracting within-dataset neighbors ## Running CCA ## Merging objects ## Finding neighborhoods ## Finding anchors ## Found 1693 anchors ## Filtering anchors ## Retained 1618 anchors ## Extracting within-dataset neighbors ## Running CCA ## Merging objects ## Finding neighborhoods ## Finding anchors ## Found 1576 anchors ## Filtering anchors ## Retained 1433 anchors ## Extracting within-dataset neighbors gcdata &lt;- IntegrateData(anchorset = gcdata.anchors, dims = 1:30) ## Merging dataset 4 into 2 ## Extracting anchors for merged samples ## Finding integration vectors ## Finding integration vector weights ## Integrating data ## Merging dataset 3 into 2 4 ## Extracting anchors for merged samples ## Finding integration vectors ## Finding integration vector weights ## Integrating data ## Merging dataset 1 into 2 4 3 ## Extracting anchors for merged samples ## Finding integration vectors ## Finding integration vector weights ## Integrating data ## Warning: Adding a command log without an assay associated with it DefaultAssay(gcdata) &lt;- &quot;integrated&quot; # Run the standard workflow for visualization and clustering. # The integrated data object only stores the commonly shared variable genes. gcdata &lt;- ScaleData(gcdata, do.center = T, do.scale = F) ## Centering data matrix gcdata &lt;- RunPCA(gcdata, npcs = 40, ndims.print = 1:5, nfeatures.print = 5) ## PC_ 1 ## Positive: CHGB, CHGA, VGF, ABCC8, G6PC2 ## Negative: REG1A, SERPINA3, REG1B, SPINK1, TACSTD2 ## PC_ 2 ## Positive: REG1B, REG1A, CTRB2, PRSS1, SPINK1 ## Negative: IGFBP7, CFTR, SPP1, PMEPA1, ANXA2 ## PC_ 3 ## Positive: INS, IAPP, RBP4, PCSK1, HADH ## Negative: TM4SF4, GC, KCTD12, CHGB, RGS4 ## PC_ 4 ## Positive: SPP1, CFTR, ANXA4, ONECUT2, SLC4A4 ## Negative: SPARC, COL1A1, COL1A2, COL3A1, FN1 ## PC_ 5 ## Positive: INS, G6PC2, VGF, GC, LOXL4 ## Negative: PPY, AQP3, SST, ID2, ETV1 DimPlot(gcdata, dims = c(1, 2), reduction = &quot;pca&quot;, split.by = &quot;tech&quot;) # Clustering. Choose the dimensional reduction type to use and the number of aligned # canonical correlation vectors to use. gcdata &lt;- FindNeighbors(gcdata, reduction = &quot;pca&quot;, dims = 1:20, k.param = 20) ## Computing nearest neighbor graph ## Computing SNN gcdata &lt;- FindClusters(gcdata, resolution = 0.8, algorithm = 1, random.seed = 100) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 2000 ## Number of edges: 82031 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8403 ## Number of communities: 9 ## Elapsed time: 0 seconds # UMAP. Choose the dimensional reduction type to use and the number of aligned # canonical correlation vectors to use. gcdata &lt;- RunUMAP(gcdata, dims = 1:30, reduction = &quot;pca&quot;, n.neighbors = 15, min.dist = 0.5, spread = 1, metric = &quot;euclidean&quot;, seed.use = 1) ## 19:59:41 UMAP embedding parameters a = 0.583 b = 1.334 ## 19:59:41 Read 2000 rows and found 30 numeric columns ## 19:59:41 Using FNN for neighbor search, n_neighbors = 15 ## 19:59:42 Commencing smooth kNN distance calibration using 1 thread ## 19:59:42 Initializing from normalized Laplacian + noise ## 19:59:42 Commencing optimization for 500 epochs, with 44578 positive edges ## 19:59:44 Optimization finished # After data integration, use the original expression data in all visualization and DE tests. # The integrated data must not be used in DE tests as it violates assumptions of independence in DE tests! DefaultAssay(gcdata) &lt;- &quot;RNA&quot; # Visualize the Louvain clustering and the batches on the UMAP. # Remember, the clustering is stored in @meta.data in column seurat_clusters # and the technology is stored in the column tech. Remember you can also use DimPlot. p1 &lt;- DimPlot(gcdata, reduction = &quot;umap&quot;, group.by = &quot;seurat_clusters&quot;) p2 &lt;- DimPlot(gcdata, reduction = &quot;umap&quot;, group.by = &quot;tech&quot;) p1 + p2 # Let&#39;s look to see how the adjusted rand index changed compared to using no batch correction. ari &lt;- dplyr::select(gcdata[[]], tech, seurat_clusters) ari$tech &lt;- plyr::mapvalues(ari$tech, from = c(&quot;celseq&quot;, &quot;celseq2&quot;, &quot;fluidigmc1&quot;, &quot;smartseq2&quot;), to = c(0, 1, 2, 3)) adj.rand.index(as.numeric(ari$tech), as.numeric(ari$seurat_clusters)) ## [1] 0.2910816 # We can also identify conserved marker genes across the batches. Differential gene expression is # done across each batch, and the p-values are combined. markers &lt;- FindConservedMarkers(gcdata, ident.1 = 0, grouping.var = &quot;tech&quot;, assay = &quot;RNA&quot;, print.bar = T) ## Testing group celseq: (0) vs (2, 5, 3, 1, 7, 8, 4, 6) ## Testing group celseq2: (0) vs (2, 7, 3, 4, 5, 6, 1, 8) ## Testing group fluidigmc1: (0) vs (1, 2, 5, 3, 4, 6, 8, 7) ## Testing group smartseq2: (0) vs (6, 5, 3, 1, 7, 4, 2, 8) head(markers) ## celseq_p_val celseq_avg_logFC celseq_pct.1 celseq_pct.2 celseq_p_val_adj ## TTR 3.390774e-38 2.484763 1.000 0.840 1.140419e-33 ## IRX2 5.412444e-55 1.444636 0.914 0.114 1.820367e-50 ## GC 6.002464e-45 1.735058 0.971 0.223 2.018809e-40 ## TM4SF4 1.689266e-40 2.077775 1.000 0.447 5.681508e-36 ## PCSK2 9.449515e-39 1.967239 1.000 0.502 3.178155e-34 ## CRYBA2 1.219002e-45 2.175575 0.986 0.249 4.099868e-41 ## celseq2_p_val celseq2_avg_logFC celseq2_pct.1 celseq2_pct.2 ## TTR 1.739228e-48 1.616678 1.000 1.000 ## IRX2 1.986638e-45 1.039948 0.982 0.296 ## GC 2.408920e-41 1.464222 0.991 0.637 ## TM4SF4 6.084562e-42 1.428749 1.000 0.675 ## PCSK2 3.067042e-41 1.205282 1.000 0.930 ## CRYBA2 5.114040e-44 1.342788 0.964 0.312 ## celseq2_p_val_adj fluidigmc1_p_val fluidigmc1_avg_logFC fluidigmc1_pct.1 ## TTR 5.849545e-44 1.309385e-47 1.5276204 1.000 ## IRX2 6.681658e-41 5.587069e-40 0.3931639 0.871 ## GC 8.101920e-37 8.305073e-52 1.3483970 0.992 ## TM4SF4 2.046421e-37 2.281765e-51 1.6572137 1.000 ## PCSK2 1.031538e-36 1.610934e-29 0.8852347 1.000 ## CRYBA2 1.720005e-39 3.177304e-30 0.6646222 0.955 ## fluidigmc1_pct.2 fluidigmc1_p_val_adj smartseq2_p_val ## TTR 0.932 4.403854e-43 2.285127e-56 ## IRX2 0.204 1.879099e-35 1.192243e-47 ## GC 0.288 2.793245e-47 1.422158e-38 ## TM4SF4 0.443 7.674259e-47 3.349777e-42 ## PCSK2 0.870 5.418054e-25 6.430694e-51 ## CRYBA2 0.473 1.068623e-25 9.436894e-50 ## smartseq2_avg_logFC smartseq2_pct.1 smartseq2_pct.2 smartseq2_p_val_adj ## TTR 1.7368710 1.000 1.000 7.685568e-52 ## IRX2 0.7954382 0.894 0.235 4.009871e-43 ## GC 1.1002339 1.000 0.685 4.783145e-34 ## TM4SF4 1.2984975 1.000 0.822 1.126630e-37 ## PCSK2 1.3372298 1.000 0.716 2.162835e-46 ## CRYBA2 1.8649270 1.000 0.630 3.173910e-45 ## max_pval minimump_p_val ## TTR 3.390774e-38 9.140508e-56 ## IRX2 5.587069e-40 2.164978e-54 ## GC 1.422158e-38 3.322029e-51 ## TM4SF4 1.689266e-40 9.127059e-51 ## PCSK2 1.610934e-29 2.572278e-50 ## CRYBA2 3.177304e-30 3.774757e-49 # Visualize the expression of the first 5 marker genes on UMAP across the different batches using DoHeatmap. gcdata &lt;- ScaleData(gcdata, features = rownames(gcdata), do.center = T, do.scale = F) ## Centering data matrix DoHeatmap(gcdata, features = rownames(markers)[1:5], group.by = &quot;tech&quot;, disp.max = 3) # Markers for pancreatic cells from &quot;A Single-Cell Transcriptome Atlas of the # Human Pancreas&quot;.https://www.cell.com/cell-systems/pdfExtended/S2405-4712(16)30292-7 genes &lt;- c(&quot;GCG&quot;, &quot;INS&quot;, &quot;SST&quot;, &quot;PPY&quot;, &quot;PRSS1&quot;, &quot;KRT19&quot;, &quot;PECAM1&quot;, &quot;COL1A1&quot;) FeaturePlot(gcdata, genes, ncol = 4) # Save current progress. save(gcdata, file = Rda.Seurat3.path) # To load the data, run the following command. # load(Rda.Seurat3.path) 12.4.2 Batch correction: integrative non-negative matrix factorization (NMF) using LIGER Here we use integrative non-negative matrix factorization to see to what extent it can remove potential batch effects. The important parameters in the batch correction are the number of factors (k), the penalty parameter (lambda), and the clustering resolution. The number of factors sets the number of factors (consisting of shared and dataset-specific factors) used in factorizing the matrix. The penalty parameter sets the balance between factors shared across the batches and factors specific to the individual batches. The default setting of lambda=5.0 is usually used by the Macosko lab. Resolution=1.0 is used in the Louvain clustering of the shared neighbor factors that have been quantile normalized. # load(Rda.sparse.path) ob.list &lt;- list(&quot;celseq&quot; = celseq, &quot;celseq2&quot; = celseq2, &quot;fluidigmc1&quot; = fluidigmc1, &quot;smartseq2&quot; = smartseq2) # Identify variable genes that are variable across most samples. var.genes &lt;- SelectIntegrationFeatures(ob.list, nfeatures = 2000, verbose = TRUE, fvf.nfeatures = 2000, selection.method = &quot;vst&quot;) # Next we create a LIGER object with raw counts data from each batch. data.liger &lt;- createLiger(sapply(ob.list, function(data) data[[&#39;RNA&#39;]]@counts[, colnames(data)]), remove.missing = F) # Normalize gene expression for each batch. data.liger &lt;- liger::normalize(data.liger) # Use my method or Liger method for selecting variable genes (var.thresh changes number of variable genes). data.liger@var.genes &lt;- var.genes # data.liger &lt;- selectGenes(data.liger, var.thresh = 0.1, do.plot = F) # Print out the number of variable genes for LIGER analysis. print(length(data.liger@var.genes)) # Scale the gene expression across the datasets. # Why does LIGER not center the data? Hint, think about the use of # non-negative matrix factorization and the constraints that this imposes. data.liger &lt;- scaleNotCenter(data.liger) # These two steps take 10-20 min. Only run them if you finish with the rest of the code. # Use the `suggestK` function to determine the appropriate number of factors to use. # Use the `suggestLambda` function to find the smallest lambda for which the alignment metric stabilizes. # k.suggest &lt;- suggestK(data.liger, k.test = seq(5, 30, 5), plot.log2 = T) # lambda.suggest &lt;- suggestLambda(gcdata.liger, k.suggest) # Use alternating least squares (ALS) to factorize the matrix. # Next, quantile align the factor loadings across the datasets, and do clustering. k.suggest &lt;- 20 # with this line, we do not use the suggested k by suggestK() lambda.suggest &lt;- 5 # with this line, we do not use the suggested lambda by suggestLambda() set.seed(100) # optimizeALS below is stochastic data.liger &lt;- optimizeALS(data.liger, k = k.suggest, lamda = lambda.suggest) # What do matrices H, V, and W represent, and what are their dimensions? dim(data.liger@H$celseq) dim(data.liger@V$celseq) dim(data.liger@W) # Next, do clustering of cells in shared nearest factor space. # Build SNF graph, do quantile normalization, cluster quantile normalized data data.liger &lt;- quantileAlignSNF(data.liger, resolution = 1) # SNF clustering and quantile alignment # What are the dimensions of H.norm. What does this represent? dim(data.liger@H.norm) # Let&#39;s see what the liger data looks like mapped onto a UMAP visualization. data.liger &lt;- runUMAP(data.liger, n_neighbors = 15, min_dist = 0.5) # conda install -c conda-forge umap-learn p &lt;- plotByDatasetAndCluster(data.liger, return.plots = T) print(p[[1]]) # plot by dataset plot_grid(p[[1]], p[[2]]) # Let&#39;s look to see how the adjusted rand index changed compared to using no batch correction. tech &lt;- unlist(lapply(1:length(data.liger@H), function(x) { rep(names(data.liger@H)[x], nrow(data.liger@H[[x]]))})) clusters &lt;- data.liger@alignment.clusters ari &lt;- data.frame(&quot;tech&quot; = tech, &quot;clusters&quot; = clusters) ari$tech &lt;- plyr::mapvalues(ari$tech, from = c(&quot;celseq&quot;, &quot;celseq2&quot;, &quot;fluidigmc1&quot;, &quot;smartseq2&quot;), to = c(0, 1, 2, 3)) adj.rand.index(as.numeric(ari$tech), as.numeric(ari$clusters)) # Look at proportion of each batch in each cluster, and look at factor loadings across clusters plotClusterProportions(data.liger) plotClusterFactors(data.liger, use.aligned = T) # Look at genes that are specific to a dataset and shared across datasets. # Use the plotWordClouds function and choose 2 datasets. pdf(paste0(mydir, &quot;word_clouds.pdf&quot;)) plotWordClouds(data.liger, dataset1 = &quot;celseq2&quot;, dataset2 = &quot;smartseq2&quot;) dev.off() # Look at factor loadings for each cell using plotFactors. pdf(paste0(mydir, &quot;plot_factors.pdf&quot;)) plotFactors(data.liger) dev.off() # Identify shared and batch-specific marker genes from liger factorization. # Use the getFactorMarkers function and choose 2 datasets. # Then plot some genes of interest using plotGene. markers &lt;- getFactorMarkers(data.liger, dataset1 = &quot;celseq2&quot;, dataset2 = &quot;smartseq2&quot;, num.genes = 10) plotGene(data.liger, gene = &quot;INS&quot;) # Save current progress. save(data.liger, file = Rda.liger.path) # To load the data, run the following command. # load(Rda.liger.path) 12.5 Additional exploration: Regressing out unwanted covariates Learn how to regress out different technical covariates (number of UMIs, number of genes, percent mitochondrial reads) by studying Seurat’s PBMC tutorial and the ScaleData() function. 12.6 Additional exploration: kBET Within your RStudio session, install k-nearest neighbour batch effect test and learn how to use its functionality to quantify batch effects in the pancreatic data. 12.7 Additional exploration: Seurat 3 Read how new version of Seurat does data integration 12.8 Acknowledgements This document builds off a tutorial from the Seurat website and a tutorial from the LIGER website. "],
["trajectory-inference.html", "13 Trajectory Inference 13.1 Slides", " 13 Trajectory Inference 13.1 Slides "],
["trajectory-analysis.html", "14 Trajectory Analysis 14.1 Load settings and packages 14.2 First look at the differentiation data from Deng et al. 14.3 Principle Components Analysis 14.4 Diffusion map pseudotime 14.5 Slingshot map pseudotime 14.6 Find temporally expressed genes 14.7 Comparison of the different trajectory inference methods 14.8 Plots of gene expression over time. 14.9 Acknowledgements", " 14 Trajectory Analysis In this lab, we will analyze a single cell RNA-seq dataset that will teach us about several methods to infer the differentiation trajectory of a set of cells. These methods can order a set of individual cells along a path / trajectory / lineage, and assign a pseudotime value to each cell that represents where the cell is along that path. This can be a starting point for further analysis to determine gene expression programs driving interesting cell phenotypes. As you are running the code, think about how the algorithms work and what you like and do not like about the assumptions and utilities provided by the algorithm. 14.1 Load settings and packages library(SingleCellExperiment) # way to store single cell data ## Loading required package: SummarizedExperiment ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ## Loading required package: parallel ## ## Attaching package: &#39;BiocGenerics&#39; ## The following objects are masked from &#39;package:parallel&#39;: ## ## clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, ## clusterExport, clusterMap, parApply, parCapply, parLapply, ## parLapplyLB, parRapply, parSapply, parSapplyLB ## The following object is masked from &#39;package:liger&#39;: ## ## normalize ## The following objects are masked from &#39;package:dplyr&#39;: ## ## combine, intersect, setdiff, union ## The following object is masked from &#39;package:Matrix&#39;: ## ## which ## The following objects are masked from &#39;package:stats&#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from &#39;package:base&#39;: ## ## anyDuplicated, append, as.data.frame, basename, cbind, colnames, ## dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, ## grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, ## order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, ## rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, ## union, unique, unsplit, which, which.max, which.min ## Loading required package: S4Vectors ## ## Attaching package: &#39;S4Vectors&#39; ## The following object is masked from &#39;package:plyr&#39;: ## ## rename ## The following objects are masked from &#39;package:dplyr&#39;: ## ## first, rename ## The following object is masked from &#39;package:Matrix&#39;: ## ## expand ## The following object is masked from &#39;package:base&#39;: ## ## expand.grid ## Loading required package: IRanges ## ## Attaching package: &#39;IRanges&#39; ## The following object is masked from &#39;package:plyr&#39;: ## ## desc ## The following object is masked from &#39;package:sp&#39;: ## ## %over% ## The following objects are masked from &#39;package:dplyr&#39;: ## ## collapse, desc, slice ## Loading required package: GenomeInfoDb ## Loading required package: Biobase ## Welcome to Bioconductor ## ## Vignettes contain introductory material; view with ## &#39;browseVignettes()&#39;. To cite Bioconductor, see ## &#39;citation(&quot;Biobase&quot;)&#39;, and for packages &#39;citation(&quot;pkgname&quot;)&#39;. ## Loading required package: DelayedArray ## Loading required package: matrixStats ## ## Attaching package: &#39;matrixStats&#39; ## The following objects are masked from &#39;package:Biobase&#39;: ## ## anyMissing, rowMedians ## The following object is masked from &#39;package:plyr&#39;: ## ## count ## The following object is masked from &#39;package:dplyr&#39;: ## ## count ## Loading required package: BiocParallel ## ## Attaching package: &#39;DelayedArray&#39; ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges ## The following objects are masked from &#39;package:base&#39;: ## ## aperm, apply, rowsum ## ## Attaching package: &#39;SummarizedExperiment&#39; ## The following object is masked from &#39;package:Seurat&#39;: ## ## Assays library(destiny) # diffusion maps and diffusion pseudotime ## ## Attaching package: &#39;destiny&#39; ## The following object is masked from &#39;package:SummarizedExperiment&#39;: ## ## distance ## The following object is masked from &#39;package:GenomicRanges&#39;: ## ## distance ## The following object is masked from &#39;package:IRanges&#39;: ## ## distance library(scater) # related SingleCellExperiment package ## ## Attaching package: &#39;scater&#39; ## The following objects are masked from &#39;package:liger&#39;: ## ## runTSNE, runUMAP library(clusterExperiment) ## Registered S3 methods overwritten by &#39;registry&#39;: ## method from ## print.registry_field proxy ## print.registry_entry proxy ## ## Attaching package: &#39;clusterExperiment&#39; ## The following object is masked from &#39;package:scater&#39;: ## ## plotHeatmap library(gam) ## Loading required package: splines ## Loading required package: foreach ## Loaded gam 1.16.1 library(corrplot) ## corrplot 0.84 loaded ## ## Attaching package: &#39;corrplot&#39; ## The following object is masked from &#39;package:destiny&#39;: ## ## colorlegend library(ggplot2) library(ggthemes) ## ## Attaching package: &#39;ggthemes&#39; ## The following object is masked from &#39;package:cowplot&#39;: ## ## theme_map library(ggbeeswarm) library(dplyr) library(cowplot) library(RColorBrewer) library(knitr) # Set folder location for saving output files. This is also the same location as input data. mydir &lt;- &quot;data/trajectory/&quot; setwd(&quot;/home/rstudio/materials/&quot;) # Objects to save. Rda.destiny.path &lt;- paste0(mydir, &quot;trajectory_destiny.Rda&quot;) Rda.slingshot.path &lt;- paste0(mydir, &quot;trajectory_slingshot.Rda&quot;) set.seed(1) # set a seed for your random number generator to get reproducible results opts_chunk$set(fig.align = &quot;center&quot;) 14.2 First look at the differentiation data from Deng et al. We will use a nice SMART-Seq2 single cell RNA-seq data from Single-Cell RNA-Seq Reveals Dynamic, Random Monoallelic Gene Expression in Mammalian Cells. Here is one relevant detail from their paper: “To investigate allele-specific gene expression at single-cell resolution, we isolated 269 individual cells dissociated from in vivo F1 embryos (CAST/EiJ × C57BL/6J, hereafter abbreviated as CAST and C57, respectively) from oocyte to blastocyst stages of mouse preimplantation development (PD)” # Read in single cell data. path.deng &lt;- paste0(mydir, &quot;deng-reads.rds&quot;) deng_SCE &lt;- readRDS(path.deng) # What class is the deng_SCE object, and how is it organized? class(deng_SCE) ## [1] &quot;SingleCellExperiment&quot; ## attr(,&quot;package&quot;) ## [1] &quot;SingleCellExperiment&quot; structure(deng_SCE) ## class: SingleCellExperiment ## dim: 22431 268 ## metadata(0): ## assays(2): counts logcounts ## rownames(22431): Hvcn1 Gbp7 ... Sox5 Alg11 ## rowData names(10): feature_symbol is_feature_control ... total_counts ## log10_total_counts ## colnames(268): 16cell 16cell.1 ... zy.2 zy.3 ## colData names(30): cell_type2 cell_type1 ... pct_counts_ERCC ## is_cell_control ## reducedDimNames(0): ## spikeNames(1): ERCC ## altExpNames(0): # How many mouse cells are at each stage? table(deng_SCE$cell_type1) ## ## 16cell 2cell 4cell 8cell blast zygote ## 50 22 14 37 133 12 table(deng_SCE$cell_type2) ## ## 16cell 4cell 8cell early2cell earlyblast late2cell lateblast ## 50 14 37 8 43 10 30 ## mid2cell midblast zy ## 12 60 4 # Re-order the levels of the factor storing the cell developmental stage. deng_SCE$cell_type2 &lt;- factor(deng_SCE$cell_type2, levels = c(&quot;zy&quot;, &quot;early2cell&quot;, &quot;mid2cell&quot;, &quot;late2cell&quot;, &quot;4cell&quot;, &quot;8cell&quot;, &quot;16cell&quot;, &quot;earlyblast&quot;, &quot;midblast&quot;, &quot;lateblast&quot;)) 14.3 Principle Components Analysis Let us take a first look at the Deng data. One simple approach to ordering cells in pseudotime is to use PCA. By carrying out PCA and labeling the cells by the stage at which they were collected, we can see how well the principal components separate cells along a differentiation trajectory. # Run PCA on Deng data. Use the runPCA function from the SingleCellExperiment package. deng_SCE &lt;- runPCA(deng_SCE, ncomponents = 50) # Use the reducedDim function to access the PCA and store the results. pca &lt;- reducedDim(deng_SCE, &quot;PCA&quot;) # Describe how the PCA is stored in a matrix. Why does it have this structure? head(pca) ## PC1 PC2 PC3 PC4 PC5 PC6 ## 16cell 24.79868 -62.20826 8.035201 -2.07391816 2.1297390 14.0930954 ## 16cell.1 28.77121 -50.35974 13.607012 0.08664449 0.9454185 3.5987880 ## 16cell.2 26.67901 -61.03875 7.239352 -6.60967794 -1.0775002 11.8876579 ## 16cell.3 29.01151 -56.03620 6.433057 2.85332708 -4.2885083 -0.1488504 ## 16cell.4 26.38026 -58.09265 4.671850 7.99519397 9.8077416 2.0570042 ## 16cell.5 24.90566 -60.77897 5.632497 -3.80156587 9.8835527 11.9028394 ## PC7 PC8 PC9 PC10 PC11 PC12 ## 16cell 2.4645020 1.6350660 7.202260 9.862212 -10.660702 -0.6401721 ## 16cell.1 2.1726663 -3.3481641 8.967394 6.664942 -14.493227 -11.7471565 ## 16cell.2 -7.9007309 0.3368756 6.032645 5.295515 -15.384993 -4.2930696 ## 16cell.3 -4.3727592 -1.1582470 1.520145 -8.789699 -19.386866 0.4999047 ## 16cell.4 -0.6031572 -3.6743278 5.793753 10.823787 -7.613724 -4.7288640 ## 16cell.5 -4.3269009 3.8968881 11.805221 9.798854 -11.016137 -19.1535086 ## PC13 PC14 PC15 PC16 PC17 PC18 ## 16cell -5.716841 6.544614 -6.652210 -3.458346 4.499013 -11.360753 ## 16cell.1 13.284708 -4.206404 -8.721043 -7.926277 0.703508 -5.418131 ## 16cell.2 9.633173 1.672498 -9.609001 -9.302794 10.219743 -5.763834 ## 16cell.3 14.177687 -8.509097 -6.978210 10.771078 6.188808 6.504081 ## 16cell.4 3.106382 -4.078414 -10.739979 -12.032452 6.239499 2.331292 ## 16cell.5 9.544362 -2.255400 -8.614958 -2.832196 1.798584 2.321082 ## PC19 PC20 PC21 PC22 PC23 PC24 ## 16cell 2.2617345 -2.456274 11.227414 1.7122827 -8.418641 4.254968 ## 16cell.1 -11.8613891 4.069530 9.320831 0.5802347 -11.878096 -6.412425 ## 16cell.2 -3.3460356 4.165813 2.031473 -2.1106373 -1.762218 -1.135134 ## 16cell.3 -0.6042649 6.008176 9.982856 9.4888653 2.822138 12.871921 ## 16cell.4 3.9402029 -0.298227 10.773722 -0.6374236 4.730329 4.670391 ## 16cell.5 -2.0280791 5.050525 -3.252243 -7.1527175 -9.923140 -1.791511 ## PC25 PC26 PC27 PC28 PC29 PC30 ## 16cell -4.049629 -4.133374 0.6235391 -3.381254 -13.94917609 8.217824 ## 16cell.1 -8.052083 -8.334263 0.5815629 4.592214 -1.32417854 -5.266909 ## 16cell.2 -2.326133 -3.775858 2.3388745 -6.947394 -0.08121559 2.942813 ## 16cell.3 -5.860750 -1.869659 -7.0402429 5.092207 2.53575943 18.529304 ## 16cell.4 -4.291113 -13.005331 -3.2802102 4.606226 3.52531994 3.599833 ## 16cell.5 4.708265 -5.717693 -1.1023767 9.761377 4.57312078 12.138646 ## PC31 PC32 PC33 PC34 PC35 PC36 ## 16cell -6.897320 5.675943 8.6076039 3.713348 0.9099737 4.7467546 ## 16cell.1 -4.538307 -9.166969 -9.4525575 8.848231 2.0782319 7.4318993 ## 16cell.2 3.082470 2.207176 0.5365986 3.895378 -7.4493361 0.7465149 ## 16cell.3 1.680117 3.839556 -13.3156066 6.257479 4.1112596 0.2780589 ## 16cell.4 -13.314741 1.453554 0.1334034 -2.941487 0.8162660 -2.9940693 ## 16cell.5 -4.608498 12.180530 5.8667454 -6.645273 -1.0224859 0.8960299 ## PC37 PC38 PC39 PC40 PC41 PC42 ## 16cell -9.063470 -5.2765051 -1.1758453 9.474215 -3.559391 4.7781174 ## 16cell.1 -6.217009 1.0216459 -0.5798035 21.705585 3.570104 -2.3279923 ## 16cell.2 -6.227582 3.0863112 -8.6153521 -1.401230 -2.266017 -0.8150665 ## 16cell.3 -8.411600 3.7169411 0.7050601 2.959623 3.123082 -1.0916370 ## 16cell.4 2.871774 -4.2664023 7.4894594 -8.207422 -4.223035 1.4763577 ## 16cell.5 10.169730 0.3923632 9.3346900 8.114487 -11.186021 4.5635674 ## PC43 PC44 PC45 PC46 PC47 PC48 ## 16cell -7.92280920 -8.558202 7.058962 -3.058208 -0.5723866 4.674956 ## 16cell.1 5.60067539 8.717056 -6.480960 -8.554813 -13.1868736 3.397938 ## 16cell.2 5.25328812 -5.803788 2.726822 -1.241769 7.4824415 -4.088461 ## 16cell.3 -0.05135523 -2.181424 2.404780 -8.691230 8.9700016 -3.713540 ## 16cell.4 1.55019720 4.946841 0.520753 3.068227 10.7801148 5.167658 ## 16cell.5 -9.98211745 -8.759947 -3.727758 9.064882 -1.7524456 -3.306621 ## PC49 PC50 ## 16cell 2.936258 3.5978317 ## 16cell.1 3.420235 -3.4895386 ## 16cell.2 -4.446014 -0.2326760 ## 16cell.3 5.179604 9.7144236 ## 16cell.4 1.077789 3.0529018 ## 16cell.5 -5.019027 0.9275007 dim(pca) ## [1] 268 50 # Add PCA data (first two PCs) to the deng_SCE object. deng_SCE$PC1 &lt;- pca[, 1] deng_SCE$PC2 &lt;- pca[, 2] head(colData(deng_SCE)) ## DataFrame with 6 rows and 32 columns ## cell_type2 cell_type1 total_features log10_total_features ## &lt;factor&gt; &lt;character&gt; &lt;integer&gt; &lt;numeric&gt; ## 16cell 16cell 16cell 7882 3.89669152656288 ## 16cell.1 16cell 16cell 7671 3.88490859416261 ## 16cell.2 16cell 16cell 8012 3.90379514274104 ## 16cell.3 16cell 16cell 7980 3.90205731080847 ## 16cell.4 16cell 16cell 8179 3.91275330367132 ## 16cell.5 16cell 16cell 7291 3.86284665998294 ## total_counts log10_total_counts pct_counts_top_50_features ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; ## 16cell 8825980 6.94576298819116 16.1419581734833 ## 16cell.1 7714601 6.88731352551746 14.3400287325294 ## 16cell.2 8074971 6.90714102508777 16.2521450541432 ## 16cell.3 6334456 6.8017093923827 14.7442337589842 ## 16cell.4 9885518 6.99499947515896 14.8676680372237 ## 16cell.5 10571900 7.02415308755133 15.0683037107805 ## pct_counts_top_100_features pct_counts_top_200_features ## &lt;numeric&gt; &lt;numeric&gt; ## 16cell 22.9905574225185 31.9837570445435 ## 16cell.1 20.7937779283724 29.2256333153199 ## 16cell.2 23.0008380215855 32.0749387211422 ## 16cell.3 21.3769738080113 30.2242213064547 ## 16cell.4 21.4405557705727 29.9306015122323 ## 16cell.5 21.4823636243249 30.227310133467 ## pct_counts_top_500_features total_features_endogenous ## &lt;numeric&gt; &lt;integer&gt; ## 16cell 47.7577107584654 7882 ## 16cell.1 44.9996701060755 7671 ## 16cell.2 47.7693356421961 8012 ## 16cell.3 46.1895070389628 7980 ## 16cell.4 45.5819917580444 8179 ## 16cell.5 46.3653553287489 7291 ## log10_total_features_endogenous total_counts_endogenous ## &lt;numeric&gt; &lt;integer&gt; ## 16cell 3.89669152656288 8825980 ## 16cell.1 3.88490859416261 7714601 ## 16cell.2 3.90379514274104 8074971 ## 16cell.3 3.90205731080847 6334456 ## 16cell.4 3.91275330367132 9885518 ## 16cell.5 3.86284665998294 10571900 ## log10_total_counts_endogenous pct_counts_endogenous ## &lt;numeric&gt; &lt;numeric&gt; ## 16cell 6.94576298819116 100 ## 16cell.1 6.88731352551746 100 ## 16cell.2 6.90714102508777 100 ## 16cell.3 6.8017093923827 100 ## 16cell.4 6.99499947515896 100 ## 16cell.5 7.02415308755133 100 ## pct_counts_top_50_features_endogenous ## &lt;numeric&gt; ## 16cell 16.1419581734833 ## 16cell.1 14.3400287325294 ## 16cell.2 16.2521450541432 ## 16cell.3 14.7442337589842 ## 16cell.4 14.8676680372237 ## 16cell.5 15.0683037107805 ## pct_counts_top_100_features_endogenous ## &lt;numeric&gt; ## 16cell 22.9905574225185 ## 16cell.1 20.7937779283724 ## 16cell.2 23.0008380215855 ## 16cell.3 21.3769738080113 ## 16cell.4 21.4405557705727 ## 16cell.5 21.4823636243249 ## pct_counts_top_200_features_endogenous ## &lt;numeric&gt; ## 16cell 31.9837570445435 ## 16cell.1 29.2256333153199 ## 16cell.2 32.0749387211422 ## 16cell.3 30.2242213064547 ## 16cell.4 29.9306015122323 ## 16cell.5 30.227310133467 ## pct_counts_top_500_features_endogenous total_features_feature_control ## &lt;numeric&gt; &lt;integer&gt; ## 16cell 47.7577107584654 0 ## 16cell.1 44.9996701060755 0 ## 16cell.2 47.7693356421961 0 ## 16cell.3 46.1895070389628 0 ## 16cell.4 45.5819917580444 0 ## 16cell.5 46.3653553287489 0 ## log10_total_features_feature_control total_counts_feature_control ## &lt;numeric&gt; &lt;integer&gt; ## 16cell 0 0 ## 16cell.1 0 0 ## 16cell.2 0 0 ## 16cell.3 0 0 ## 16cell.4 0 0 ## 16cell.5 0 0 ## log10_total_counts_feature_control pct_counts_feature_control ## &lt;numeric&gt; &lt;numeric&gt; ## 16cell 0 0 ## 16cell.1 0 0 ## 16cell.2 0 0 ## 16cell.3 0 0 ## 16cell.4 0 0 ## 16cell.5 0 0 ## total_features_ERCC log10_total_features_ERCC total_counts_ERCC ## &lt;integer&gt; &lt;numeric&gt; &lt;integer&gt; ## 16cell 0 0 0 ## 16cell.1 0 0 0 ## 16cell.2 0 0 0 ## 16cell.3 0 0 0 ## 16cell.4 0 0 0 ## 16cell.5 0 0 0 ## log10_total_counts_ERCC pct_counts_ERCC is_cell_control ## &lt;numeric&gt; &lt;numeric&gt; &lt;logical&gt; ## 16cell 0 0 FALSE ## 16cell.1 0 0 FALSE ## 16cell.2 0 0 FALSE ## 16cell.3 0 0 FALSE ## 16cell.4 0 0 FALSE ## 16cell.5 0 0 FALSE ## PC1 PC2 ## &lt;numeric&gt; &lt;numeric&gt; ## 16cell 24.7986820262447 -62.2082648676066 ## 16cell.1 28.7712069014198 -50.3597388047316 ## 16cell.2 26.6790073144958 -61.0387480545727 ## 16cell.3 29.0115120743145 -56.0361975940189 ## 16cell.4 26.3802550037036 -58.0926458026471 ## 16cell.5 24.9056588611302 -60.7789654488048 # Plot PC biplot with cells colored by cell_type2. # colData(deng_SCE) accesses the cell metadata DataFrame object for deng_SCE. # Look at Figure 1A of the paper as a comparison to your PC biplot. ggplot(as.data.frame(colData(deng_SCE)), aes(x = PC1, y = PC2, color = cell_type2)) + geom_quasirandom(groupOnX = FALSE) + scale_color_tableau() + theme_classic() + xlab(&quot;PC1&quot;) + ylab(&quot;PC2&quot;) + ggtitle(&quot;PC biplot&quot;) # PCA is a simple approach and can be good to compare to more complex algorithms # designed to capture differentiation processes. As a simple measure of pseudotime # we can use the coordinates of PC1. # Plot PC1 vs cell_type2. deng_SCE$pseudotime_PC1 &lt;- rank(deng_SCE$PC1) # rank cells by their PC1 score ggplot(as.data.frame(colData(deng_SCE)), aes(x = pseudotime_PC1, y = cell_type2, colour = cell_type2)) + geom_quasirandom(groupOnX = FALSE) + scale_color_tableau() + theme_classic() + xlab(&quot;PC1&quot;) + ylab(&quot;Timepoint&quot;) + ggtitle(&quot;Cells ordered by first principal component&quot;) ggsave(paste0(mydir, &quot;/pseudotime_PC1.png&quot;)) ## Saving 7 x 5 in image # Try separating the cell types using other PCs. How does the separation look? deng_SCE$PC5 &lt;- pca[, 5] deng_SCE$PC6 &lt;- pca[, 6] ggplot(as.data.frame(colData(deng_SCE)), aes(x = PC5, y = PC6, color = cell_type2)) + geom_quasirandom(groupOnX = FALSE) + scale_color_tableau() + theme_classic() + xlab(&quot;PC5&quot;) + ylab(&quot;PC6&quot;) + ggtitle(&quot;PC biplot&quot;) 14.4 Diffusion map pseudotime Let us see how a more advance trajectory inference method, diffusion maps and diffusion pseudotime, performs at placing cells along the expected differentiation trajectory. Diffusion maps were introduced by Ronald Coifman and Stephane Lafon, and the underlying idea is to assume that the data are samples from a diffusion process. The method infers the low-dimensional manifold by estimating the eigenvalues and eigenvectors for the diffusion operator related to the data. Angerer et al have applied the diffusion maps concept to the analysis of single-cell RNA-seq data to create an R package called destiny. We will use two forms of pseudotime: the first diffusion component and the diffusion pseudotime. # Prepare a counts matrix with labeled rows and columns. deng &lt;- logcounts(deng_SCE) # access log-transformed counts matrix cellLabels &lt;- deng_SCE$cell_type2 colnames(deng) &lt;- cellLabels # Make a diffusion map. dm &lt;- DiffusionMap(t(deng)) ## Warning in DiffusionMap(t(deng)): You have 22431 genes. Consider passing e.g. ## n_pcs = 50 to speed up computation. # Optional: Try different sigma values when making diffusion map. # dm &lt;- DiffusionMap(t(deng), sigma = &quot;local&quot;) # use local option to set sigma # sigmas &lt;- find_sigmas(t(deng), verbose = FALSE) # find optimal sigma # dm &lt;- DiffusionMap(t(deng), sigma = optimal_sigma(sigmas)) # Plot diffusion component 1 vs diffusion component 2 (DC1 vs DC2). tmp &lt;- data.frame(DC1 = eigenvectors(dm)[, 1], DC2 = eigenvectors(dm)[, 2], Timepoint = cellLabels) ggplot(tmp, aes(x = DC1, y = DC2, colour = Timepoint)) + geom_point() + scale_color_tableau() + xlab(&quot;Diffusion component 1&quot;) + ylab(&quot;Diffusion component 2&quot;) + theme_classic() # Try plotting higher diffusion components against one another. tmp &lt;- data.frame(DC3 = eigenvectors(dm)[, 3], DC4 = eigenvectors(dm)[, 4], Timepoint = cellLabels) ggplot(tmp, aes(x = DC3, y = DC4, colour = Timepoint)) + geom_point() + #scale_color_tableau() + xlab(&quot;Diffusion component 3&quot;) + ylab(&quot;Diffusion component 4&quot;) + theme_classic() # Next, let us use the first diffusion component (DC1) as a measure of pseudotime. # How does the separation by cell stage look? deng_SCE$pseudotime_diffusionmap &lt;- rank(eigenvectors(dm)[,1]) # rank cells by their dpt ggplot(as.data.frame(colData(deng_SCE)), aes(x = pseudotime_diffusionmap, y = cell_type2, colour = cell_type2)) + geom_quasirandom(groupOnX = FALSE) + scale_color_tableau() + theme_classic() + xlab(&quot;Diffusion component 1 (DC1)&quot;) + ylab(&quot;Timepoint&quot;) + ggtitle(&quot;Cells ordered by DC1&quot;) ggsave(paste0(mydir, &quot;/pseudotime_DC1.png&quot;)) ## Saving 7 x 5 in image # Plot eigenvalues of diffusion distance matrix. How many diffusion components would you use? # This is analagous to the PC elbow plot (scree plot) that we previously used to assess how # many PCs to use in downstream applications like clustering. plot(eigenvalues(dm), ylim = 0:1, pch = 20, xlab = &#39;Diffusion component (DC)&#39;, ylab = &#39;Eigenvalue&#39;) # What happens if you run the diffusion map on the PCs? Why would one do this? rownames(pca) &lt;- cellLabels dm &lt;- DiffusionMap(pca) # Diffusion pseudotime calculation. # Set index or tip of pseudotime calculation to be a zygotic cell (cell 268). dpt &lt;- DPT(dm, tips = 268) # Plot DC1 vs DC2 and color the cells by their inferred diffusion pseudotime. # We can accesss diffusion pseudotime via dpt$dpt. df &lt;- data.frame(DC1 = eigenvectors(dm)[, 1], DC2 = eigenvectors(dm)[, 2], dptval = dpt$dpt, cell_type2 = cellLabels) p1 &lt;- ggplot(df) + geom_point(aes(x = DC1, y = DC2, color = dptval)) p2 &lt;- ggplot(df) + geom_point(aes(x = DC1, y = DC2, color = cell_type2)) p &lt;- plot_grid(p1, p2) p save_plot(paste0(mydir, &quot;/dpt_celltype.png&quot;), p, base_height = 5, base_aspect_ratio = 2) # Plot diffusion pseudotime vs timepoint. # Which separates the data better, DC1 or diffusion pseudotime? deng_SCE$pseudotime_dpt &lt;- rank(dpt$dpt) ggplot(as.data.frame(colData(deng_SCE)), aes(x = pseudotime_dpt, y = cell_type2, colour = cell_type2)) + geom_quasirandom(groupOnX = FALSE) + scale_color_tableau() + theme_classic() + xlab(&quot;Diffusion map pseudotime (dpt)&quot;) + ylab(&quot;Timepoint&quot;) + ggtitle(&quot;Cells ordered by diffusion map pseudotime&quot;) ggsave(paste0(mydir, &quot;/pseudotime_dpt.png&quot;)) ## Saving 7 x 5 in image # Save current progress. save(deng_SCE, file = Rda.destiny.path) # To load the data, run the following command. # load(Rda.destiny.path) 14.5 Slingshot map pseudotime Let us see how another advance trajectory inference method, Slingshot, performs at placing cells along the expected differentiation trajectory. library(slingshot) ## Loading required package: princurve library(Seurat) # load(Rda.destiny.path) # Read the Slingshot documentation (?slingshot) and then run Slingshot below. # Given your understanding of the algorithm and the documentation, what is one # major set of parameters we omitted here when running Slingshot? sce &lt;- slingshot(deng_SCE, reducedDim = &#39;PCA&#39;) # no clusters ## No cluster labels provided. Continuing with one cluster. ## Using full covariance matrix # Plot PC1 vs PC2 colored by Slingshot pseudotime. colors &lt;- rainbow(50, alpha = 1) plot(reducedDims(sce)$PCA, col = colors[cut(sce$slingPseudotime_1,breaks=50)], pch=16, asp = 1) lines(SlingshotDataSet(sce), lwd=2) # Plot Slingshot pseudotime vs cell stage. ggplot(as.data.frame(colData(deng_SCE)), aes(x = sce$slingPseudotime_1, y = cell_type2, colour = cell_type2)) + geom_quasirandom(groupOnX = FALSE) + scale_color_tableau() + theme_classic() + xlab(&quot;Slingshot pseudotime&quot;) + ylab(&quot;Timepoint&quot;) + ggtitle(&quot;Cells ordered by Slingshot pseudotime&quot;) # Cluster cells using the Seurat workflow below. gcdata &lt;- CreateSeuratObject(counts = counts(deng_SCE), project = &quot;slingshot&quot;) ## Warning: Feature names cannot have pipe characters (&#39;|&#39;), replacing with dashes ## (&#39;-&#39;) gcdata &lt;- NormalizeData(gcdata, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) gcdata &lt;- FindVariableFeatures(gcdata, selection.method = &quot;vst&quot;, nfeatures = 2000) gcdata &lt;- ScaleData(object = gcdata, do.center = T, do.scale = F) ## Centering data matrix gcdata &lt;- RunPCA(gcdata, features = VariableFeatures(gcdata), npcs = 40, ndims.print = 1:5, nfeatures.print = 5) ## PC_ 1 ## Positive: Actb, Fabp3, Psap, Akr1b8, Krt18 ## Negative: Zbed3, C86187, Klf17, Btg4, Ccdc6 ## PC_ 2 ## Positive: Krt18, Id2, Akr1b8, BC053393, Fabp3 ## Negative: Gm11517, Alppl2, Obox6, Pdxk, Trim43b ## PC_ 3 ## Positive: Id2, Krt18, Tspan8, BC053393, Krt8 ## Negative: Gm11517, Alppl2, Ypel5, Pdxk, Fam46c ## PC_ 4 ## Positive: Alppl2, Dab2, Gm11517, Krt18, Tspan8 ## Negative: Upp1, Tdgf1, Spp1, Zfp57, Tat ## PC_ 5 ## Positive: Klf17, Ddx24, Bod1l, Tor1b, Gm1995 ## Negative: Alppl2, Gm4340, Gm11756, Gm8300, Gm5039 # Cluster the cells using the first twenty principal components. gcdata &lt;- FindNeighbors(gcdata, reduction = &quot;pca&quot;, dims = 1:20, k.param = 20) ## Computing nearest neighbor graph ## Computing SNN gcdata &lt;- FindClusters(gcdata, resolution = 0.6, algorithm = 1, random.seed = 100) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 268 ## Number of edges: 6804 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8081 ## Number of communities: 5 ## Elapsed time: 0 seconds # Add clustering information from Seurat to the deng_SCE object deng_SCE$slingPseudotime_1 &lt;- NULL # remove old slingshot pseudotime data colData(deng_SCE)$Seurat_clusters &lt;- as.character(Idents(gcdata)) # go from factor to character head(colData(deng_SCE)) ## DataFrame with 6 rows and 38 columns ## cell_type2 cell_type1 total_features log10_total_features ## &lt;factor&gt; &lt;character&gt; &lt;integer&gt; &lt;numeric&gt; ## 16cell 16cell 16cell 7882 3.89669152656288 ## 16cell.1 16cell 16cell 7671 3.88490859416261 ## 16cell.2 16cell 16cell 8012 3.90379514274104 ## 16cell.3 16cell 16cell 7980 3.90205731080847 ## 16cell.4 16cell 16cell 8179 3.91275330367132 ## 16cell.5 16cell 16cell 7291 3.86284665998294 ## total_counts log10_total_counts pct_counts_top_50_features ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; ## 16cell 8825980 6.94576298819116 16.1419581734833 ## 16cell.1 7714601 6.88731352551746 14.3400287325294 ## 16cell.2 8074971 6.90714102508777 16.2521450541432 ## 16cell.3 6334456 6.8017093923827 14.7442337589842 ## 16cell.4 9885518 6.99499947515896 14.8676680372237 ## 16cell.5 10571900 7.02415308755133 15.0683037107805 ## pct_counts_top_100_features pct_counts_top_200_features ## &lt;numeric&gt; &lt;numeric&gt; ## 16cell 22.9905574225185 31.9837570445435 ## 16cell.1 20.7937779283724 29.2256333153199 ## 16cell.2 23.0008380215855 32.0749387211422 ## 16cell.3 21.3769738080113 30.2242213064547 ## 16cell.4 21.4405557705727 29.9306015122323 ## 16cell.5 21.4823636243249 30.227310133467 ## pct_counts_top_500_features total_features_endogenous ## &lt;numeric&gt; &lt;integer&gt; ## 16cell 47.7577107584654 7882 ## 16cell.1 44.9996701060755 7671 ## 16cell.2 47.7693356421961 8012 ## 16cell.3 46.1895070389628 7980 ## 16cell.4 45.5819917580444 8179 ## 16cell.5 46.3653553287489 7291 ## log10_total_features_endogenous total_counts_endogenous ## &lt;numeric&gt; &lt;integer&gt; ## 16cell 3.89669152656288 8825980 ## 16cell.1 3.88490859416261 7714601 ## 16cell.2 3.90379514274104 8074971 ## 16cell.3 3.90205731080847 6334456 ## 16cell.4 3.91275330367132 9885518 ## 16cell.5 3.86284665998294 10571900 ## log10_total_counts_endogenous pct_counts_endogenous ## &lt;numeric&gt; &lt;numeric&gt; ## 16cell 6.94576298819116 100 ## 16cell.1 6.88731352551746 100 ## 16cell.2 6.90714102508777 100 ## 16cell.3 6.8017093923827 100 ## 16cell.4 6.99499947515896 100 ## 16cell.5 7.02415308755133 100 ## pct_counts_top_50_features_endogenous ## &lt;numeric&gt; ## 16cell 16.1419581734833 ## 16cell.1 14.3400287325294 ## 16cell.2 16.2521450541432 ## 16cell.3 14.7442337589842 ## 16cell.4 14.8676680372237 ## 16cell.5 15.0683037107805 ## pct_counts_top_100_features_endogenous ## &lt;numeric&gt; ## 16cell 22.9905574225185 ## 16cell.1 20.7937779283724 ## 16cell.2 23.0008380215855 ## 16cell.3 21.3769738080113 ## 16cell.4 21.4405557705727 ## 16cell.5 21.4823636243249 ## pct_counts_top_200_features_endogenous ## &lt;numeric&gt; ## 16cell 31.9837570445435 ## 16cell.1 29.2256333153199 ## 16cell.2 32.0749387211422 ## 16cell.3 30.2242213064547 ## 16cell.4 29.9306015122323 ## 16cell.5 30.227310133467 ## pct_counts_top_500_features_endogenous total_features_feature_control ## &lt;numeric&gt; &lt;integer&gt; ## 16cell 47.7577107584654 0 ## 16cell.1 44.9996701060755 0 ## 16cell.2 47.7693356421961 0 ## 16cell.3 46.1895070389628 0 ## 16cell.4 45.5819917580444 0 ## 16cell.5 46.3653553287489 0 ## log10_total_features_feature_control total_counts_feature_control ## &lt;numeric&gt; &lt;integer&gt; ## 16cell 0 0 ## 16cell.1 0 0 ## 16cell.2 0 0 ## 16cell.3 0 0 ## 16cell.4 0 0 ## 16cell.5 0 0 ## log10_total_counts_feature_control pct_counts_feature_control ## &lt;numeric&gt; &lt;numeric&gt; ## 16cell 0 0 ## 16cell.1 0 0 ## 16cell.2 0 0 ## 16cell.3 0 0 ## 16cell.4 0 0 ## 16cell.5 0 0 ## total_features_ERCC log10_total_features_ERCC total_counts_ERCC ## &lt;integer&gt; &lt;numeric&gt; &lt;integer&gt; ## 16cell 0 0 0 ## 16cell.1 0 0 0 ## 16cell.2 0 0 0 ## 16cell.3 0 0 0 ## 16cell.4 0 0 0 ## 16cell.5 0 0 0 ## log10_total_counts_ERCC pct_counts_ERCC is_cell_control ## &lt;numeric&gt; &lt;numeric&gt; &lt;logical&gt; ## 16cell 0 0 FALSE ## 16cell.1 0 0 FALSE ## 16cell.2 0 0 FALSE ## 16cell.3 0 0 FALSE ## 16cell.4 0 0 FALSE ## 16cell.5 0 0 FALSE ## PC1 PC2 pseudotime_PC1 PC5 ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## 16cell 24.7986820262447 -62.2082648676066 171 2.12973902514438 ## 16cell.1 28.7712069014198 -50.3597388047316 181 0.945418456955433 ## 16cell.2 26.6790073144958 -61.0387480545727 176 -1.07750020611762 ## 16cell.3 29.0115120743145 -56.0361975940189 183 -4.28850833105763 ## 16cell.4 26.3802550037036 -58.0926458026471 175 9.80774159539532 ## 16cell.5 24.9056588611302 -60.7789654488048 172 9.88355269770382 ## PC6 pseudotime_diffusionmap pseudotime_dpt ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## 16cell 14.0930954146809 123 88 ## 16cell.1 3.59878801496069 182 68 ## 16cell.2 11.8876579313426 122 122 ## 16cell.3 -0.148850434153179 173 74 ## 16cell.4 2.05700416962238 128 102 ## 16cell.5 11.9028394497909 144 63 ## Seurat_clusters ## &lt;character&gt; ## 16cell 0 ## 16cell.1 0 ## 16cell.2 0 ## 16cell.3 0 ## 16cell.4 0 ## 16cell.5 0 # Then run Slingshot using these cluster assignments. deng_SCE &lt;- slingshot(deng_SCE, clusterLabels = &#39;Seurat_clusters&#39;, reducedDim = &#39;PCA&#39;) ## Using diagonal covariance matrix # Plot PC1 vs PC2 colored by Slingshot pseudotime. colors &lt;- rainbow(50, alpha = 1) plot(reducedDims(deng_SCE)$PCA, col = colors[cut(deng_SCE$slingPseudotime_1,breaks=50)], pch=16, asp = 1) lines(SlingshotDataSet(deng_SCE), lwd=2) # Plot Slingshot pseudotime vs cell stage. ggplot(as.data.frame(colData(deng_SCE)), aes(x = slingPseudotime_1, y = cell_type2, colour = cell_type2)) + geom_quasirandom(groupOnX = FALSE) + scale_color_tableau() + theme_classic() + xlab(&quot;Slingshot pseudotime&quot;) + ylab(&quot;Timepoint&quot;) + ggtitle(&quot;Cells ordered by Slingshot pseudotime&quot;) ## Warning: Removed 24 rows containing missing values (position_quasirandom). ggsave(paste0(mydir, &quot;/pseudotime_slingshot.png&quot;)) ## Saving 7 x 5 in image ## Warning: Removed 24 rows containing missing values (position_quasirandom). # Save current progress. save(deng_SCE, file = Rda.slingshot.path) # To load the data, run the following command. # load(Rda.slingshot.path) 14.6 Find temporally expressed genes In this final analysis code chunk, we will identify temporally expressed genes, ie those genes whose expression is changing in a continuous manner over pseudotime. To do this, we will fit a GAM with a LOESS term for pseudotime. Functions for fitting and working with generalized additive models, as described in “Generalized Additive Models” (Hastie and Tibshirani, 1990). Read more about GAMs # Only look at the 1,000 most variable genes when identifying temporally expressesd genes. # Identify the variable genes by ranking all genes by their variance. Y &lt;- log2(counts(deng_SCE) + 1) var1K &lt;- names(sort(apply(Y, 1, var), decreasing = TRUE))[1:1000] Y &lt;- Y[var1K, ] # only counts for variable genes # Fit GAM for each gene using pseudotime as independent variable. t &lt;- deng_SCE$slingPseudotime_1 gam.pval &lt;- apply(Y, 1, function(z){ d &lt;- data.frame(z=z, t=t) tmp &lt;- gam(z ~ lo(t), data=d) p &lt;- summary(tmp)[4][[1]][1,5] p }) ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored # Identify genes with the most significant time-dependent model fit. topgenes &lt;- names(sort(gam.pval, decreasing = FALSE))[1:100] # Prepare and plot a heatmap of the top genes that vary their expression over pseudotime. require(clusterExperiment) heatdata &lt;- as.matrix(gcdata[[&#39;RNA&#39;]]@data[rownames(gcdata) %in% topgenes, order(t, na.last = NA)]) heatclus &lt;- Idents(gcdata)[order(t, na.last = NA)] png(paste0(mydir, &quot;heatmap_time_genes.png&quot;), width=10, height=10, units = &quot;in&quot;, res=200) # ce &lt;- ClusterExperiment(heatdata, heatclus, transformation = log1p) # clusterExperiment::plotHeatmap(ce, clusterSamplesData = &quot;orderSamplesValue&quot;, visualizeData = &#39;transformed&#39;, cexRow = 1.5, fontsize = 15) heatmap(log1p(heatdata), Colv = NA, ColSideColors = brewer.pal(9,&quot;Set1&quot;)[heatclus]) dev.off() ## png ## 2 14.7 Comparison of the different trajectory inference methods How do the trajectories inferred by PCA, diffusion pseudotime, and slingshot pseudotime compare to one another? # Prepare data frame with different pseudotime measures. df_pseudotime &lt;- as.data.frame(colData(deng_SCE)[, c(&quot;pseudotime_PC1&quot;, &quot;pseudotime_dpt&quot;, &quot;slingPseudotime_1&quot;)]) colnames(df_pseudotime) &lt;- c(&quot;PC1&quot;, &quot;diffusion&quot;, &quot;slingshot&quot;) # Plot correlation between different pseudotime measures. corrplot.mixed(cor(df_pseudotime, use = &quot;na.or.complete&quot;), order = &quot;hclust&quot;, tl.col = &quot;black&quot;, main = &quot;Correlation matrix for pseudotime results&quot;, mar = c(0, 0, 3.1, 0)) 14.8 Plots of gene expression over time. Visualize how some of the temporally expressed genes change in time. plotExpression(deng_SCE, &quot;Obox5&quot;, x = &quot;PC1&quot;, colour_by = &quot;cell_type2&quot;, show_violin = FALSE, show_smooth = TRUE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; plotExpression(deng_SCE, &quot;Obox5&quot;, x = &quot;pseudotime_dpt&quot;, colour_by = &quot;cell_type2&quot;, show_violin = FALSE, show_smooth = TRUE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; plotExpression(deng_SCE, &quot;Obox5&quot;, x = &quot;slingPseudotime_1&quot;, colour_by = &quot;cell_type2&quot;, show_violin = FALSE, show_smooth = TRUE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ## Warning: Removed 24 rows containing non-finite values (stat_smooth). ## Warning: Removed 24 rows containing missing values (geom_point). 14.9 Acknowledgements This document builds off chapter 8.4 from the Analysis of single cell RNA-seq data, from the Destiny vignette and from the Slingshot vignette. "],
["mutli-omic-analysis.html", "15 Mutli-omic Analysis 15.1 Slides", " 15 Mutli-omic Analysis 15.1 Slides "],
["cite-seq.html", "16 CITE-Seq 16.1 Load settings and packages 16.2 Load in the data 16.3 Setup a Seurat object, and cluster cells based on RNA expression 16.4 Add the protein expression levels to the Seurat object 16.5 Visualize protein levels on RNA clusters 16.6 Identify differentially expressed proteins between clusters 16.7 Cluster directly on protein levels 16.8 Additional exploration: another example of multi-modal analysis 16.9 Acknowledgements", " 16 CITE-Seq In this lab, we will look at how single cell RNA-seq and single cell protein expression measurement datasets can be jointly analyzed, as part of a CITE-Seq experiment. To learn more about how the antibody barcode matrix is computationally generated from the sequencing data, please visit CITE-seq-Count. To learn more about CITE-Seq and feature barcoding, please visit the CITE-seq site. This lab closely follows the official vignette available at Using Seurat with multi-modal data. 16.1 Load settings and packages knitr::opts_chunk$set(echo = TRUE) library(Seurat) library(Matrix) library(ggplot2) library(patchwork) library(dplyr) library(plyr) # Set folder location for saving output files. This is also the same location as input data. mydir &lt;- &quot;data/citeseq/&quot; setwd(&quot;/home/rstudio/materials/&quot;) # Objects to save. Rda.quickload.path &lt;- paste0(mydir, &quot;citeseq_quickload.Rda&quot;) # datasets saved as sparse objects Rda.RNA.path &lt;- paste0(mydir, &quot;citeseq_RNA.Rda&quot;) # cbmc clustered using RNA Rda.multi.path &lt;- paste0(mydir, &quot;citesq_cbmc_multi.rda&quot;) # cbmc clustered and ADT added as an assay Rda.protein.path &lt;- paste0(mydir, &quot;citeseq_protein.Rda&quot;) # cbmc clustered using protein 16.2 Load in the data Here, we analyze a dataset of 8,617 cord blood mononuclear cells (CBMCs), produced with CITE-seq, where we simultaneously measure the single cell transcriptomes alongside the expression of 11 surface proteins, whose levels are quantified with DNA-barcoded antibodies. First, we load in two count matrices : one for the RNA measurements, and one for the antibody-derived tags (ADT). # Load in the RNA UMI matrix # Note that this dataset also contains ~5% of mouse cells, which we can use # as negative controls for the protein measurements. For this reason, the # gene expression matrix has HUMAN_ or MOUSE_ appended to the beginning of # each gene. cbmc.rna &lt;- as.sparse(read.csv(paste0(mydir, &quot;GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz&quot;), sep = &quot;,&quot;, header = TRUE, row.names = 1)) cbmc.rna[20400:20403,1:2] # To make life a bit easier going forward, we&#39;re going to discard all but # the top 100 most highly expressed mouse genes, and remove the &#39;HUMAN_&#39; # from the CITE-seq prefix cbmc.rna &lt;- CollapseSpeciesExpressionMatrix(cbmc.rna, prefix = &quot;HUMAN_&quot;, controls = &quot;MOUSE_&quot;) # Load in the ADT UMI matrix cbmc.adt &lt;- as.sparse(read.csv(paste0(mydir, &quot;GSE100866_CBMC_8K_13AB_10X-ADT_umi.csv.gz&quot;), sep = &quot;,&quot;, header = TRUE, row.names = 1)) # When adding multimodal data to Seurat, it&#39;s okay to have duplicate feature names. Each set of # modal data (eg. RNA, ADT, etc.) is stored in its own Assay object. One of these Assay objects # is called the &#39;default assay&#39;, meaning it&#39;s used for all analyses and visualization. To pull # data from an assay that isn&#39;t the default, you can specify a key that&#39;s linked to an assay for # feature pulling. To see all keys for all objects, use the Key function. # Lastly, we observed poor enrichments for CCR5, CCR7, and CD10 - and therefore # remove them from the matrix (optional) cbmc.adt &lt;- cbmc.adt[setdiff(rownames(x = cbmc.adt), c(&quot;CCR5&quot;, &quot;CCR7&quot;, &quot;CD10&quot;)), ] # Look at structure of ADT matrix. cbmc.adt[1:10,1:3] # What fraction of cells in the ADT and RNA matrix overlap? length(intersect(colnames(cbmc.rna), colnames(cbmc.adt))) / length(union(colnames(cbmc.rna), colnames(cbmc.adt))) # Save current progress. save(cbmc.rna, cbmc.adt, file = Rda.quickload.path) 16.3 Setup a Seurat object, and cluster cells based on RNA expression The steps below represent a quick clustering of the PBMCs based on the scRNA-seq data. For more detail on individual steps or more advanced options, see our PBMC clustering guided tutorial here load(Rda.quickload.path) cbmc &lt;- CreateSeuratObject(counts = cbmc.rna) ## Warning: Feature names cannot have underscores (&#39;_&#39;), replacing with dashes ## (&#39;-&#39;) # This code sub-samples the data in order to speed up calculations and not use too much memory. # Idents(cbmc) &lt;- &quot;orig.ident&quot; # cbmc &lt;- subset(cbmc, downsample = 2000, seed = 1) # cbmc.adt &lt;- cbmc.adt[, colnames(cbmc)] # standard log-normalization cbmc &lt;- NormalizeData(cbmc) # choose ~1k variable features cbmc &lt;- FindVariableFeatures(cbmc) # standard scaling (no regression) cbmc &lt;- ScaleData(cbmc) ## Centering and scaling data matrix # Run PCA, select PCs for tSNE visualization and graph-based clustering cbmc &lt;- RunPCA(cbmc, verbose = FALSE) ElbowPlot(cbmc, ndims = 50) # Cluster the cells using the first 25 principal components. cbmc &lt;- FindNeighbors(cbmc, dims = 1:25) ## Computing nearest neighbor graph ## Computing SNN cbmc &lt;- FindClusters(cbmc, resolution = 0.8) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 8617 ## Number of edges: 347548 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8592 ## Number of communities: 19 ## Elapsed time: 1 seconds cbmc &lt;- RunTSNE(cbmc, dims = 1:25, method = &quot;FIt-SNE&quot;) # Find the markers that define each cluster, and use these to annotate the # clusters, we use max.cells.per.ident to speed up the process cbmc.rna.markers &lt;- FindAllMarkers(cbmc, max.cells.per.ident = 100, logfc.threshold = log(2), only.pos = TRUE, min.diff.pct = 0.3) ## Calculating cluster 0 ## Calculating cluster 1 ## Calculating cluster 2 ## Calculating cluster 3 ## Calculating cluster 4 ## Calculating cluster 5 ## Calculating cluster 6 ## Calculating cluster 7 ## Calculating cluster 8 ## Calculating cluster 9 ## Calculating cluster 10 ## Calculating cluster 11 ## Calculating cluster 12 ## Calculating cluster 13 ## Calculating cluster 14 ## Calculating cluster 15 ## Calculating cluster 16 ## Calculating cluster 17 ## Calculating cluster 18 # Which cluster consists of mouse cells? cbmc.rna.markers %&gt;% filter(cluster == 5) ## p_val avg_logFC pct.1 pct.2 p_val_adj cluster gene ## 1 2.589983e-38 3.0688532 1.000 0.082 5.309724e-34 5 MOUSE-Shfm1 ## 2 3.343974e-38 3.3214918 1.000 0.065 6.855481e-34 5 MOUSE-Eef1g ## 3 4.576942e-38 3.0566728 1.000 0.087 9.383188e-34 5 MOUSE-Rtn4 ## 4 5.060526e-38 3.3736882 1.000 0.092 1.037459e-33 5 MOUSE-Npm1 ## 5 5.853288e-38 3.1075365 1.000 0.075 1.199983e-33 5 MOUSE-S100a11 ## 6 7.309965e-38 3.1210730 1.000 0.137 1.498616e-33 5 MOUSE-Bgn ## 7 7.854611e-38 3.1823668 1.000 0.048 1.610274e-33 5 MOUSE-Atp6v1g1 ## 8 8.078132e-38 3.1757854 1.000 0.079 1.656098e-33 5 MOUSE-Serbp1 ## 9 1.205463e-37 3.5136647 1.000 0.081 2.471320e-33 5 MOUSE-Gm10260 ## 10 1.309584e-37 3.0016168 1.000 0.065 2.684778e-33 5 MOUSE-Rpl22 ## 11 1.358667e-37 3.2116968 1.000 0.081 2.785404e-33 5 MOUSE-Ndufa4 ## 12 1.451626e-37 3.4523548 1.000 0.121 2.975979e-33 5 MOUSE-Rpl32 ## 13 1.548045e-37 3.0793534 1.000 0.055 3.173646e-33 5 MOUSE-Rps27l ## 14 1.891767e-37 3.2763202 1.000 0.073 3.878312e-33 5 MOUSE-Rplp2 ## 15 1.918593e-37 3.2224149 1.000 0.131 3.933307e-33 5 MOUSE-Slc25a4 ## 16 2.230479e-37 3.4298554 1.000 0.137 4.572705e-33 5 MOUSE-Rps9 ## 17 2.262278e-37 3.2949243 1.000 0.144 4.637896e-33 5 MOUSE-Hsp90ab1 ## 18 2.436807e-37 3.0609232 1.000 0.128 4.995698e-33 5 MOUSE-Nme1 ## 19 2.576793e-37 3.3457217 1.000 0.096 5.282684e-33 5 MOUSE-Tmsb10 ## 20 2.599760e-37 3.1809764 1.000 0.149 5.329768e-33 5 MOUSE-Tubb5 ## 21 2.835723e-37 2.9497869 1.000 0.067 5.813516e-33 5 MOUSE-Calr ## 22 2.845096e-37 3.5141515 1.000 0.085 5.832732e-33 5 MOUSE-Ybx1 ## 23 2.861704e-37 3.0508286 1.000 0.098 5.866779e-33 5 MOUSE-Arpc1b ## 24 2.943740e-37 3.0414266 1.000 0.113 6.034962e-33 5 MOUSE-Lmna ## 25 3.141150e-37 2.8791432 1.000 0.104 6.439672e-33 5 MOUSE-Ctsl ## 26 3.205286e-37 2.9776496 1.000 0.103 6.571158e-33 5 MOUSE-Gas5 ## 27 3.248892e-37 2.9783581 1.000 0.141 6.660554e-33 5 MOUSE-Atp5b ## 28 3.248892e-37 2.9437600 1.000 0.102 6.660554e-33 5 MOUSE-Slc25a3 ## 29 3.373363e-37 3.3672873 1.000 0.095 6.915732e-33 5 MOUSE-Hmga2 ## 30 3.486852e-37 3.1325081 1.000 0.045 7.148395e-33 5 MOUSE-Eno1 ## 31 3.709120e-37 3.3965827 1.000 0.113 7.604067e-33 5 MOUSE-H3f3b ## 32 3.731361e-37 3.3445044 1.000 0.109 7.649664e-33 5 MOUSE-Eif5a ## 33 3.766307e-37 3.2020434 0.998 0.060 7.721307e-33 5 MOUSE-mt-Nd2 ## 34 4.115629e-37 3.1411789 1.000 0.099 8.437452e-33 5 MOUSE-Pkm ## 35 4.300905e-37 2.8335714 1.000 0.064 8.817285e-33 5 MOUSE-Rps26 ## 36 4.511666e-37 3.2189211 1.000 0.077 9.249367e-33 5 MOUSE-Rps24 ## 37 4.661889e-37 3.0882543 1.000 0.107 9.557339e-33 5 MOUSE-Ldha ## 38 4.914987e-37 3.2250975 1.000 0.103 1.007622e-32 5 MOUSE-Calm1 ## 39 5.008380e-37 3.7123031 1.000 0.157 1.026768e-32 5 MOUSE-Rplp0 ## 40 5.175830e-37 2.9014521 1.000 0.089 1.061097e-32 5 MOUSE-Esd ## 41 5.244907e-37 3.4640366 1.000 0.094 1.075258e-32 5 MOUSE-Rpl26 ## 42 5.524036e-37 3.4322609 1.000 0.134 1.132483e-32 5 MOUSE-Rpl14 ## 43 5.604675e-37 3.1056839 1.000 0.085 1.149014e-32 5 MOUSE-Eef1b2 ## 44 5.709515e-37 3.2070806 1.000 0.111 1.170508e-32 5 MOUSE-Eef2 ## 45 6.051582e-37 2.8562423 1.000 0.099 1.240635e-32 5 MOUSE-Cox6b1 ## 46 6.276767e-37 2.9754960 1.000 0.076 1.286800e-32 5 MOUSE-Arpc2 ## 47 6.294522e-37 2.9709200 1.000 0.102 1.290440e-32 5 MOUSE-Ppp1ca ## 48 6.603459e-37 3.4895906 1.000 0.087 1.353775e-32 5 MOUSE-Cfl1 ## 49 6.726146e-37 3.1145355 0.998 0.048 1.378927e-32 5 MOUSE-Slc25a5 ## 50 7.176881e-37 3.5936267 1.000 0.126 1.471332e-32 5 MOUSE-Rps11 ## 51 8.111934e-37 3.1933176 1.000 0.093 1.663028e-32 5 MOUSE-Rps19 ## 52 8.378419e-37 2.9673217 1.000 0.109 1.717660e-32 5 MOUSE-Tnfrsf12a ## 53 8.654506e-37 3.5547613 1.000 0.154 1.774260e-32 5 MOUSE-Pfn1 ## 54 8.654506e-37 3.2416146 1.000 0.136 1.774260e-32 5 MOUSE-Txn1 ## 55 9.162208e-37 3.2749753 1.000 0.077 1.878344e-32 5 MOUSE-Naca ## 56 9.605768e-37 3.3640993 1.000 0.118 1.969279e-32 5 MOUSE-Rplp1 ## 57 9.781641e-37 3.0361351 1.000 0.098 2.005334e-32 5 MOUSE-Tm4sf1 ## 58 1.121385e-36 3.2047609 1.000 0.112 2.298952e-32 5 MOUSE-Ranbp1 ## 59 1.238798e-36 2.9237221 1.000 0.122 2.539659e-32 5 MOUSE-Anxa2 ## 60 1.374845e-36 3.0152863 1.000 0.125 2.818570e-32 5 MOUSE-B2m ## 61 1.486569e-36 3.0540241 1.000 0.164 3.047615e-32 5 MOUSE-Hint1 ## 62 1.709022e-36 3.1125583 1.000 0.165 3.503666e-32 5 MOUSE-S100a10 ## 63 2.391987e-36 3.2185589 1.000 0.110 4.903812e-32 5 MOUSE-Cox8a ## 64 2.546516e-36 3.4041833 1.000 0.197 5.220612e-32 5 MOUSE-Rpl4 ## 65 2.694724e-36 3.4068076 1.000 0.113 5.524454e-32 5 MOUSE-Rpl23 ## 66 2.782618e-36 3.0687226 1.000 0.167 5.704646e-32 5 MOUSE-Gnb2l1 ## 67 2.803277e-36 2.9466599 1.000 0.071 5.746997e-32 5 MOUSE-Cald1 ## 68 3.060359e-36 3.0983460 1.000 0.120 6.274042e-32 5 MOUSE-Mt1 ## 69 3.061720e-36 3.5504399 1.000 0.085 6.276832e-32 5 MOUSE-Rps3a1 ## 70 3.089689e-36 3.0538578 1.000 0.110 6.334172e-32 5 MOUSE-Cdk4 ## 71 3.162101e-36 2.9919371 1.000 0.107 6.482624e-32 5 MOUSE-Gsto1 ## 72 3.194002e-36 3.2865393 1.000 0.187 6.548023e-32 5 MOUSE-Dlk1 ## 73 3.483292e-36 3.1971727 1.000 0.123 7.141097e-32 5 MOUSE-Prdx1 ## 74 3.818679e-36 3.2985227 1.000 0.224 7.828673e-32 5 MOUSE-Rps3 ## 75 4.225164e-36 3.3243282 1.000 0.209 8.662009e-32 5 MOUSE-Vim ## 76 4.389534e-36 3.5227154 1.000 0.236 8.998984e-32 5 MOUSE-Rpl13a ## 77 4.799768e-36 1.9191170 0.979 0.024 9.840005e-32 5 MYL3 ## 78 4.817738e-36 3.2396729 1.000 0.146 9.876844e-32 5 MOUSE-Anxa1 ## 79 5.263533e-36 3.4278589 1.000 0.126 1.079077e-31 5 MOUSE-Rps15 ## 80 5.521946e-36 2.8645123 1.000 0.114 1.132054e-31 5 MOUSE-Cstb ## 81 5.736456e-36 3.1156562 1.000 0.148 1.176031e-31 5 MOUSE-Myl12a ## 82 7.180006e-36 2.9175274 1.000 0.183 1.471973e-31 5 MOUSE-Cox4i1 ## 83 8.161440e-36 3.0344876 1.000 0.108 1.673177e-31 5 MOUSE-Lamp1 ## 84 8.360053e-36 3.2601292 1.000 0.205 1.713894e-31 5 MOUSE-Actb ## 85 9.018525e-36 3.2825215 1.000 0.269 1.848888e-31 5 MOUSE-mt-Cytb ## 86 1.661694e-35 3.3308664 1.000 0.295 3.406639e-31 5 MOUSE-Rpl8 ## 87 1.755974e-35 3.1615591 1.000 0.124 3.599922e-31 5 MOUSE-Gnas ## 88 1.844947e-35 3.2151653 0.998 0.145 3.782325e-31 5 MOUSE-mt-Nd4 ## 89 2.160878e-35 3.5516310 1.000 0.144 4.430015e-31 5 MOUSE-Cd63 ## 90 2.272852e-35 3.3854796 1.000 0.178 4.659574e-31 5 MOUSE-Rps14 ## 91 2.334724e-35 2.9695641 1.000 0.171 4.786418e-31 5 MOUSE-Bsg ## 92 3.138487e-35 3.3949580 1.000 0.378 6.434213e-31 5 MOUSE-Rps5 ## 93 4.384772e-35 3.1478765 1.000 0.237 8.989221e-31 5 MOUSE-Lgals3 ## 94 7.608819e-35 3.5809744 0.995 0.238 1.559884e-30 5 MOUSE-Malat1 ## 95 1.535971e-34 3.1143600 1.000 0.331 3.148895e-30 5 MOUSE-S100a4 ## 96 3.969846e-34 3.2843640 1.000 0.549 8.138582e-30 5 MOUSE-S100a6 ## 97 7.554328e-34 3.3319006 1.000 0.355 1.548713e-29 5 MOUSE-mt-Nd1 ## 98 8.353188e-34 1.4166049 0.984 0.093 1.712487e-29 5 DYNLL2 ## 99 1.504607e-33 3.3243385 1.000 0.446 3.084595e-29 5 MOUSE-Fth1 ## 100 2.099049e-33 3.1753011 1.000 0.400 4.303261e-29 5 MOUSE-Tmsb4x ## 101 7.464377e-32 2.6376435 0.963 0.098 1.530272e-27 5 MOUSE-Acta2 ## 102 3.566992e-29 1.3863978 0.972 0.062 7.312689e-25 5 CTD-2090I13.1 ## 103 1.946493e-23 0.9060487 0.810 0.013 3.990505e-19 5 HIST2H2AB cbmc.rna.markers %&gt;% filter(cluster == 13) ## p_val avg_logFC pct.1 pct.2 p_val_adj cluster gene ## 1 5.694937e-32 2.261027 1.000 0.146 1.167519e-27 13 MOUSE-Ranbp1 ## 2 6.122860e-32 2.499240 0.991 0.159 1.255248e-27 13 MOUSE-Rps15 ## 3 7.231469e-32 2.668083 0.991 0.152 1.482523e-27 13 MOUSE-Rplp1 ## 4 1.174562e-31 2.778360 1.000 0.357 2.407970e-27 13 MOUSE-S100a4 ## 5 1.209176e-31 2.730176 1.000 0.423 2.478932e-27 13 MOUSE-Tmsb4x ## 6 1.797643e-31 2.408277 0.991 0.156 3.685348e-27 13 MOUSE-Anxa2 ## 7 1.936705e-31 2.542341 0.972 0.109 3.970440e-27 13 MOUSE-Rplp2 ## 8 2.159518e-31 2.481118 0.991 0.145 4.427228e-27 13 MOUSE-Cox8a ## 9 2.985211e-31 2.723078 0.981 0.157 6.119982e-27 13 MOUSE-Prdx1 ## 10 3.172531e-31 2.901085 1.000 0.566 6.504006e-27 13 MOUSE-S100a6 ## 11 7.106704e-31 3.160532 0.991 0.236 1.456945e-26 13 MOUSE-Actb ## 12 8.246008e-31 2.495074 0.981 0.147 1.690514e-26 13 MOUSE-Rpl23 ## 13 9.223015e-31 2.471669 0.981 0.117 1.890810e-26 13 MOUSE-Gm10260 ## 14 9.371755e-31 2.452599 0.981 0.160 1.921303e-26 13 MOUSE-Rps11 ## 15 9.779046e-31 2.620856 0.953 0.113 2.004802e-26 13 MOUSE-Rps24 ## 16 1.251003e-30 2.465479 0.972 0.129 2.564682e-26 13 MOUSE-Rpl26 ## 17 1.756273e-30 2.535067 0.953 0.101 3.600535e-26 13 MOUSE-Rpl22 ## 18 2.034570e-30 2.482089 0.991 0.155 4.171071e-26 13 MOUSE-Rpl32 ## 19 2.379570e-30 2.559327 0.972 0.167 4.878356e-26 13 MOUSE-Rpl14 ## 20 2.548928e-30 2.753512 0.943 0.111 5.225558e-26 13 MOUSE-S100a11 ## 21 2.681390e-30 2.301315 0.981 0.197 5.497117e-26 13 MOUSE-S100a10 ## 22 3.546009e-30 2.573062 0.991 0.186 7.269673e-26 13 MOUSE-Pfn1 ## 23 3.734094e-30 2.449508 0.991 0.209 7.655267e-26 13 MOUSE-Rps14 ## 24 4.606642e-30 2.482054 0.981 0.266 9.444077e-26 13 MOUSE-Rpl13a ## 25 5.136327e-30 2.335140 0.972 0.121 1.052998e-25 13 MOUSE-Rps3a1 ## 26 5.280799e-30 2.215450 0.981 0.197 1.082617e-25 13 MOUSE-Hint1 ## 27 5.595216e-30 2.314418 0.953 0.113 1.147075e-25 13 MOUSE-Naca ## 28 7.937246e-30 2.479286 0.953 0.135 1.627215e-25 13 MOUSE-Cox6b1 ## 29 1.203382e-29 2.444119 0.953 0.169 2.467054e-25 13 MOUSE-Txn1 ## 30 1.260502e-29 2.399652 1.000 0.189 2.584156e-25 13 MOUSE-Rplp0 ## 31 1.296573e-29 2.369831 0.962 0.149 2.658103e-25 13 MOUSE-Cstb ## 32 1.409398e-29 2.398371 0.991 0.323 2.889407e-25 13 MOUSE-Rpl8 ## 33 1.501281e-29 2.156191 0.953 0.133 3.077776e-25 13 MOUSE-Arpc1b ## 34 1.713709e-29 2.675714 0.925 0.101 3.513275e-25 13 MOUSE-Rps26 ## 35 1.713709e-29 2.368067 0.953 0.117 3.513275e-25 13 MOUSE-Ndufa4 ## 36 1.781970e-29 2.380462 0.953 0.102 3.653216e-25 13 MOUSE-Eef1g ## 37 2.110199e-29 2.402753 0.991 0.402 4.326119e-25 13 MOUSE-Rps5 ## 38 2.136048e-29 2.620474 0.962 0.177 4.379112e-25 13 MOUSE-Hsp90ab1 ## 39 2.270318e-29 2.698158 0.962 0.131 4.654380e-25 13 MOUSE-Tmsb10 ## 40 2.298364e-29 2.360640 0.981 0.254 4.711877e-25 13 MOUSE-Rps3 ## 41 2.774051e-29 2.405205 0.953 0.120 5.687082e-25 13 MOUSE-Eef1b2 ## 42 2.971166e-29 2.403258 0.962 0.146 6.091187e-25 13 MOUSE-Eef2 ## 43 3.217869e-29 2.255929 0.972 0.143 6.596953e-25 13 MOUSE-Eif5a ## 44 6.052367e-29 2.390698 0.962 0.129 1.240796e-24 13 MOUSE-Rps19 ## 45 6.446107e-29 2.381902 0.943 0.118 1.321516e-24 13 MOUSE-Shfm1 ## 46 8.392692e-29 2.522999 0.991 0.468 1.720586e-24 13 MOUSE-Fth1 ## 47 1.039199e-28 2.490092 0.953 0.181 2.130462e-24 13 MOUSE-Myl12a ## 48 1.059617e-28 2.363141 0.962 0.174 2.172321e-24 13 MOUSE-Atp5b ## 49 1.136848e-28 2.420211 0.962 0.170 2.330652e-24 13 MOUSE-Rps9 ## 50 1.677680e-28 2.231629 0.953 0.121 3.439412e-24 13 MOUSE-Ybx1 ## 51 1.797144e-28 2.131666 0.953 0.122 3.684326e-24 13 MOUSE-Cfl1 ## 52 2.217540e-28 3.140499 0.972 0.297 4.546179e-24 13 MOUSE-mt-Cytb ## 53 2.236480e-28 2.200847 0.953 0.127 4.585009e-24 13 MOUSE-Npm1 ## 54 3.684323e-28 2.280569 0.972 0.240 7.553230e-24 13 MOUSE-Vim ## 55 4.076600e-28 2.343247 0.953 0.134 8.357438e-24 13 MOUSE-Pkm ## 56 4.636754e-28 2.218386 0.981 0.228 9.505810e-24 13 MOUSE-Rpl4 ## 57 6.749065e-28 2.132095 0.962 0.200 1.383626e-23 13 MOUSE-Gnb2l1 ## 58 7.778351e-28 2.210371 0.934 0.163 1.594640e-23 13 MOUSE-Nme1 ## 59 8.741573e-28 2.341123 0.943 0.215 1.792110e-23 13 MOUSE-Cox4i1 ## 60 2.222504e-27 2.114141 0.962 0.138 4.556355e-23 13 MOUSE-Calm1 ## 61 2.860745e-27 2.205576 0.962 0.158 5.864813e-23 13 MOUSE-Gnas ## 62 4.016601e-27 2.146927 0.962 0.267 8.234433e-23 13 MOUSE-Lgals3 ## 63 4.338376e-27 3.106415 0.925 0.179 8.894105e-23 13 MOUSE-mt-Nd4 ## 64 4.581561e-27 2.038114 0.896 0.086 9.392658e-23 13 MOUSE-Slc25a5 ## 65 5.536735e-27 2.718182 0.915 0.097 1.135086e-22 13 MOUSE-mt-Nd2 ## 66 1.000179e-26 2.182786 0.915 0.137 2.050467e-22 13 MOUSE-Slc25a3 ## 67 2.126742e-26 3.054986 0.953 0.380 4.360033e-22 13 MOUSE-mt-Nd1 ## 68 2.555881e-26 2.306473 0.915 0.160 5.239812e-22 13 MOUSE-B2m ## 69 2.753783e-26 2.265517 0.915 0.108 5.645531e-22 13 MOUSE-Cald1 ## 70 5.021616e-26 2.158415 0.887 0.083 1.029482e-21 13 MOUSE-Eno1 ## 71 6.477556e-26 1.876609 0.934 0.145 1.327964e-21 13 MOUSE-Cdk4 ## 72 9.132195e-26 1.929906 0.925 0.148 1.872191e-21 13 MOUSE-Lmna ## 73 1.443189e-25 2.028266 0.896 0.142 2.958682e-21 13 MOUSE-Gsto1 ## 74 2.187135e-25 2.573234 0.906 0.139 4.483845e-21 13 MOUSE-Gas5 ## 75 9.676047e-25 2.057407 0.896 0.125 1.983686e-20 13 MOUSE-Esd ## 76 1.163687e-24 1.963349 0.915 0.180 2.385675e-20 13 MOUSE-Anxa1 ## 77 1.249671e-24 1.814887 0.934 0.165 2.561951e-20 13 MOUSE-Slc25a4 ## 78 5.351638e-24 2.017758 0.906 0.178 1.097139e-19 13 MOUSE-Cd63 ## 79 9.051252e-24 1.716038 0.858 0.116 1.855597e-19 13 MOUSE-Serbp1 ## 80 1.035274e-23 1.886684 0.877 0.143 2.122415e-19 13 MOUSE-Ldha ## 81 6.074209e-23 2.021360 0.858 0.093 1.245274e-18 13 MOUSE-Rps27l ## 82 1.256351e-22 1.796896 0.877 0.113 2.575645e-18 13 MOUSE-Arpc2 ## 83 7.286297e-22 1.796396 0.821 0.087 1.493764e-17 13 MOUSE-Atp6v1g1 ## 84 4.131820e-21 2.009562 0.849 0.156 8.470644e-17 13 MOUSE-Mt1 ## 85 4.918820e-20 1.713497 0.830 0.139 1.008407e-15 13 MOUSE-Ppp1ca ## 86 5.324099e-20 2.763313 0.755 0.134 1.091493e-15 13 MOUSE-Acta2 ## 87 4.312371e-19 1.870316 0.802 0.173 8.840792e-15 13 MOUSE-Bgn ## 88 8.315943e-19 1.833178 0.811 0.221 1.704851e-14 13 MOUSE-Dlk1 ## 89 3.248015e-18 1.842319 0.764 0.145 6.658756e-14 13 MOUSE-Lamp1 ## 90 4.798035e-18 1.818716 0.821 0.205 9.836452e-14 13 MOUSE-Bsg ## 91 5.757352e-18 2.126146 0.792 0.184 1.180315e-13 13 MOUSE-Tubb5 ## 92 1.243481e-16 1.983483 0.717 0.142 2.549260e-12 13 MOUSE-Ctsl ## 93 2.451551e-16 1.886574 0.717 0.106 5.025925e-12 13 MOUSE-Calr ## 94 7.392626e-14 1.794081 0.585 0.065 1.515562e-09 13 MYL3 ## 95 7.932037e-13 1.738518 0.632 0.135 1.626147e-08 13 MOUSE-Hmga2 ## 96 4.127263e-12 1.526832 0.660 0.137 8.461302e-08 13 MOUSE-Tm4sf1 ## 97 1.305564e-11 1.661696 0.623 0.127 2.676536e-07 13 MOUSE-Rtn4 ## 98 5.333310e-09 1.413978 0.585 0.152 1.093382e-04 13 MOUSE-H3f3b ## 99 7.207313e-08 1.132159 0.434 0.103 1.477571e-03 13 CTD-2090I13.1 ## 100 9.026752e-07 1.263586 0.509 0.149 1.850574e-02 13 MOUSE-Tnfrsf12a # Note, for simplicity we are merging two CD14+ Monocyte clusters (that differ in expression of # HLA-DR genes) and NK clusters (that differ in cell cycle stage) new.cluster.ids &lt;- c(&quot;Memory CD4 T&quot;, &quot;CD14+ Mono&quot;, &quot;Naive CD4 T&quot;, &quot;NK&quot;, &quot;CD14+ Mono&quot;, &quot;Mouse&quot;, &quot;B&quot;, &quot;CD8 T&quot;, &quot;CD16+ Mono&quot;, &quot;T/Mono doublets&quot;, &quot;NK&quot;, &quot;CD34+&quot;, &quot;Multiplets&quot;, &quot;Mouse&quot;, &quot;Eryth&quot;, &quot;Mk&quot;, &quot;Mouse&quot;, &quot;DC&quot;, &quot;pDCs&quot;) names(new.cluster.ids) &lt;- levels(cbmc) cbmc &lt;- RenameIdents(cbmc, new.cluster.ids) # Visualize clustering based on RNA. DimPlot(cbmc, label = TRUE, reduction = &quot;tsne&quot;) + NoLegend() # Save current progress. save(cbmc, cbmc.rna.markers, cbmc.adt, file = Rda.RNA.path) # To load the data, run the following command. # load(Rda.RNA.path) 16.4 Add the protein expression levels to the Seurat object Seurat v3.0 allows you to store information from multiple assays in the same object, as long as the data is multi-modal (collected on the same set of cells). You can use the SetAssayData and GetAssayData accessor functions to add and fetch data from additional assays. # We will define an ADT assay, and store raw counts for it # If you are interested in how these data are internally stored, you can check out the Assay # class, which is defined in objects.R; note that all single-cell expression data, including RNA # data, are still stored in Assay objects, and can also be accessed using GetAssayData cbmc[[&quot;ADT&quot;]] &lt;- CreateAssayObject(counts = cbmc.adt) GetAssayData(cbmc, slot = &quot;counts&quot;, assay = &quot;ADT&quot;)[1:3,1:3] ## 3 x 3 sparse Matrix of class &quot;dgCMatrix&quot; ## CTGTTTACACCGCTAG CTCTACGGTGTGGCTC AGCAGCCAGGCTCATT ## CD3 60 52 89 ## CD4 72 49 112 ## CD8 76 59 61 cbmc[[&quot;ADT&quot;]]@counts[1:3, 1:3] ## 3 x 3 sparse Matrix of class &quot;dgCMatrix&quot; ## CTGTTTACACCGCTAG CTCTACGGTGTGGCTC AGCAGCCAGGCTCATT ## CD3 60 52 89 ## CD4 72 49 112 ## CD8 76 59 61 # Now we can repeat the preprocessing (normalization and scaling) steps that we typically run # with RNA, but modifying the &#39;assay&#39; argument. For CITE-seq data, we do not recommend typical # LogNormalization. Instead, we use a centered log-ratio (CLR) normalization, computed # independently for each feature. This is a slightly improved procedure from the original # publication, and we will release more advanced versions of CITE-seq normalizations soon. cbmc &lt;- NormalizeData(cbmc, assay = &quot;ADT&quot;, normalization.method = &quot;CLR&quot;) ## Normalizing across features cbmc &lt;- ScaleData(cbmc, assay = &quot;ADT&quot;) ## Centering and scaling data matrix 16.5 Visualize protein levels on RNA clusters You can use the names of any ADT markers, (i.e. “adt_CD4”), in FetchData, FeaturePlot, RidgePlot, FeatureScatter, DoHeatmap, or any other visualization features DefaultAssay(cbmc) &lt;- &quot;RNA&quot; # In this plot, protein (ADT) levels are on top, and RNA levels are on the bottom FeaturePlot(cbmc, features = c(&quot;adt_CD3&quot;, &quot;adt_CD11c&quot;, &quot;adt_CD8&quot;, &quot;adt_CD16&quot;, &quot;CD3E&quot;, &quot;ITGAX&quot;, &quot;CD8A&quot;, &quot;FCGR3A&quot;), min.cutoff = &quot;q05&quot;, max.cutoff = &quot;q95&quot;, ncol = 4) # How do the gene and protein expression levels compare to one another? # Compare gene and protein expression levels for the other 6 antibodies. FeaturePlot(cbmc, features = c(&quot;adt_CD4&quot;, &quot;adt_CD45RA&quot;, &quot;adt_CD56&quot;, &quot;adt_CD14&quot;, &quot;adt_CD19&quot;, &quot;adt_CD34&quot;, &quot;CD4&quot;, &quot;PTPRC&quot;, &quot;NCAM1&quot;, &quot;CD14&quot;, &quot;CD19&quot;, &quot;CD34&quot;), min.cutoff = &quot;q05&quot;, max.cutoff = &quot;q95&quot;, ncol = 6) # Ridge plots are another useful visualization. RidgePlot(cbmc, features = c(&quot;adt_CD3&quot;, &quot;adt_CD11c&quot;, &quot;adt_CD8&quot;, &quot;adt_CD16&quot;), ncol = 2) ## Picking joint bandwidth of 0.0848 ## Picking joint bandwidth of 0.1 ## Picking joint bandwidth of 0.142 ## Picking joint bandwidth of 0.0862 # Draw ADT scatter plots (like biaxial plots for FACS). Note that you can even &#39;gate&#39; cells if # desired by using HoverLocator and CellSelector FeatureScatter(cbmc, feature1 = &quot;adt_CD19&quot;, feature2 = &quot;adt_CD3&quot;) # HoverLocator(FeatureScatter(cbmc, feature1 = &quot;adt_CD19&quot;, feature2 = &quot;adt_CD3&quot;)) # CellSelector(FeatureScatter(cbmc, feature1 = &quot;adt_CD19&quot;, feature2 = &quot;adt_CD3&quot;)) # View relationship between protein and RNA FeatureScatter(cbmc, feature1 = &quot;adt_CD3&quot;, feature2 = &quot;CD3E&quot;) # Let&#39;s plot CD4 vs CD8 levels in T cells tcells &lt;- subset(cbmc, idents = c(&quot;Naive CD4 T&quot;, &quot;Memory CD4 T&quot;, &quot;CD8 T&quot;)) FeatureScatter(tcells, feature1 = &quot;adt_CD4&quot;, feature2 = &quot;adt_CD8&quot;) # Let&#39;s look at the raw (non-normalized) ADT counts. You can see the values are quite high, # particularly in comparison to RNA values. This is due to the significantly higher protein copy # number in cells, which significantly reduces &#39;drop-out&#39; in ADT data FeatureScatter(tcells, feature1 = &quot;adt_CD4&quot;, feature2 = &quot;adt_CD8&quot;, slot = &quot;counts&quot;) # If you look a bit more closely, you&#39;ll see that our CD8 T cell cluster is # enriched for CD8 T cells, but still contains many CD4+ CD8- T cells. This # is because Naive CD4 and CD8 T cells are quite similar transcriptomically, # and the RNA dropout levels for CD4 and CD8 are quite high. This # demonstrates the challenge of defining subtle immune cell differences from # scRNA-seq data alone. # What fraction of T cells are double negative in gene expression? (CD4- and CD8-) # You can use an interactive plot to gate on the cells (do.identify = T) or use # Boolean conditions on CD4 and CD8A expression to find double negative cells. FeatureScatter(tcells, feature1 = &quot;CD4&quot;, feature2 = &quot;CD8A&quot;) ncol(subset(tcells, subset = CD4 == 0 &amp; CD8A == 0)) / ncol(tcells) ## [1] 0.8291063 # What fraction of T cells are double negative in protein expression? (CD4- and CD8-) # length(cells) / length(tcells@cell.names) DefaultAssay(tcells) &lt;- &quot;ADT&quot; # work with ADT count matrix FeatureScatter(tcells, feature1 = &quot;adt_CD4&quot;, feature2 = &quot;adt_CD8&quot;) ncol(subset(tcells, subset = adt_CD4 &lt; 1 &amp; adt_CD8 &lt; 1)) / ncol(tcells) ## [1] 0.0102657 # Save current progress. save(cbmc, file = Rda.multi.path) # To load the data, run the following command. # load(Rda.multi.path) 16.6 Identify differentially expressed proteins between clusters # Downsample the clusters to a maximum of 300 cells each (makes the heatmap easier to see for # small clusters) cbmc.small &lt;- subset(cbmc, downsample = 300) # Find protein markers for all clusters, and draw a heatmap adt.markers &lt;- FindAllMarkers(cbmc.small, assay = &quot;ADT&quot;, only.pos = TRUE) ## Calculating cluster Memory CD4 T ## Calculating cluster CD14+ Mono ## Calculating cluster Naive CD4 T ## Calculating cluster NK ## Calculating cluster Mouse ## Calculating cluster B ## Calculating cluster CD8 T ## Calculating cluster CD16+ Mono ## Calculating cluster T/Mono doublets ## Calculating cluster CD34+ ## Calculating cluster Multiplets ## Calculating cluster Eryth ## Calculating cluster Mk ## Calculating cluster DC ## Calculating cluster pDCs DoHeatmap(cbmc.small, features = unique(adt.markers$gene), assay = &quot;ADT&quot;, angle = 90) + NoLegend() # You can see that our unknown cells co-express both myeloid and lymphoid markers (true at the # RNA level as well). They are likely cell clumps (multiplets) that should be discarded. We&#39;ll # remove the mouse cells now as well cbmc &lt;- subset(cbmc, idents = c(&quot;Multiplets&quot;, &quot;Mouse&quot;), invert = TRUE) 16.7 Cluster directly on protein levels You can also run dimensional reduction and graph-based clustering directly on CITE-seq data # Because we&#39;re going to be working with the ADT data extensively, we&#39;re going to switch the # default assay to the &#39;CITE&#39; assay. This will cause all functions to use ADT data by default, # rather than requiring us to specify it each time DefaultAssay(cbmc) &lt;- &quot;ADT&quot; cbmc &lt;- RunPCA(cbmc, features = rownames(cbmc), reduction.name = &quot;pca_adt&quot;, reduction.key = &quot;pca_adt_&quot;, verbose = FALSE) ## Warning in irlba(A = t(x = object), nv = npcs, ...): You&#39;re computing too large ## a percentage of total singular values, use a standard svd instead. ## Warning: Keys should be one or more alphanumeric characters followed by an ## underscore, setting key from pca_adt_ to pcaadt_ ## Warning: All keys should be one or more alphanumeric characters followed by an ## underscore &#39;_&#39;, setting key to pcaadt_ DimPlot(cbmc, reduction = &quot;pca_adt&quot;) # Why do we not use PCA to do dimensionality reduction here? # Is Euclidean distance a good distance metric in this case? ElbowPlot(cbmc) # Since we only have 10 markers, instead of doing PCA, we&#39;ll just use a standard euclidean # distance matrix here. Also, this provides a good opportunity to demonstrate how to do # visualization and clustering using a custom distance matrix in Seurat adt.data &lt;- GetAssayData(cbmc, slot = &quot;data&quot;) adt.dist &lt;- dist(t(adt.data)) # Before we recluster the data on ADT levels, we&#39;ll stash the RNA cluster IDs for later cbmc[[&quot;rnaClusterID&quot;]] &lt;- Idents(cbmc) # Now, we rerun tSNE using our distance matrix defined only on ADT (protein) levels. cbmc[[&quot;tsne_adt&quot;]] &lt;- RunTSNE(adt.dist, assay = &quot;ADT&quot;, reduction.key = &quot;adtTSNE_&quot;) cbmc[[&quot;adt_snn&quot;]] &lt;- FindNeighbors(adt.dist)$snn ## Building SNN based on a provided distance matrix ## Computing SNN ## Warning: Adding a Graph without an assay associated with it cbmc &lt;- FindClusters(cbmc, resolution = 0.2, graph.name = &quot;adt_snn&quot;) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 7895 ## Number of edges: 258146 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.9491 ## Number of communities: 11 ## Elapsed time: 0 seconds ## Warning: Adding a command log without an assay associated with it # We can compare the RNA and protein clustering, and use this to annotate the protein clustering # (we could also of course use FindMarkers) clustering.table &lt;- table(Idents(cbmc), cbmc$rnaClusterID) clustering.table ## ## Memory CD4 T CD14+ Mono Naive CD4 T NK B CD8 T CD16+ Mono ## 0 1754 0 1217 29 0 27 0 ## 1 0 2189 0 4 0 0 30 ## 2 3 0 2 890 3 1 0 ## 3 0 4 0 2 319 0 2 ## 4 24 0 18 4 1 243 0 ## 5 1 27 4 157 2 2 10 ## 6 4 5 0 1 0 0 0 ## 7 4 59 4 0 0 0 9 ## 8 0 9 0 2 0 0 179 ## 9 0 0 1 0 0 0 0 ## 10 1 0 2 0 25 0 0 ## ## T/Mono doublets CD34+ Eryth Mk DC pDCs ## 0 5 2 4 24 1 2 ## 1 1 1 5 25 55 0 ## 2 0 1 3 7 2 1 ## 3 0 2 2 3 0 0 ## 4 0 0 1 2 0 0 ## 5 56 0 9 16 6 2 ## 6 1 113 81 16 5 0 ## 7 117 0 0 2 0 1 ## 8 0 0 0 1 0 0 ## 9 0 0 0 0 1 43 ## 10 2 0 0 0 0 0 new.cluster.ids &lt;- c(&quot;CD4 T&quot;, &quot;CD14+ Mono&quot;, &quot;NK&quot;, &quot;B&quot;, &quot;CD8 T&quot;, &quot;NK&quot;, &quot;CD34+&quot;, &quot;T/Mono doublets&quot;, &quot;CD16+ Mono&quot;, &quot;pDCs&quot;, &quot;B&quot;) names(new.cluster.ids) &lt;- levels(cbmc) cbmc &lt;- RenameIdents(cbmc, new.cluster.ids) tsne_rnaClusters &lt;- DimPlot(cbmc, reduction = &quot;tsne_adt&quot;, group.by = &quot;rnaClusterID&quot;, pt.size = 0.5) + NoLegend() tsne_rnaClusters &lt;- tsne_rnaClusters + ggtitle(&quot;Clustering based on scRNA-seq&quot;) + theme(plot.title = element_text(hjust = 0.5)) tsne_rnaClusters &lt;- LabelClusters(plot = tsne_rnaClusters, id = &quot;rnaClusterID&quot;, size = 4) tsne_adtClusters &lt;- DimPlot(cbmc, reduction = &quot;tsne_adt&quot;, pt.size = 0.5) + NoLegend() tsne_adtClusters &lt;- tsne_adtClusters + ggtitle(&quot;Clustering based on ADT signal&quot;) + theme(plot.title = element_text(hjust = 0.5)) tsne_adtClusters &lt;- LabelClusters(plot = tsne_adtClusters, id = &quot;ident&quot;, size = 4) # Note: for this comparison, both the RNA and protein clustering are visualized on a tSNE # generated using the ADT distance matrix. wrap_plots(list(tsne_rnaClusters, tsne_adtClusters), ncol = 2) # What differences if any do you see between the clustering based on scRNA-seq # and the clustering based on ADT signal? # How could we combine these datasets in a joint, integrative analysis? # Save current progress. save(cbmc, file = Rda.protein.path) # To load the data, run the following command. # load(Rda.protein.path) The ADT-based clustering yields similar results, but with a few differences Clustering is improved for CD4/CD8 T cell populations, based on the robust ADT data for CD4, CD8, CD14, and CD45RA However, some clusters for which the ADT data does not contain good distinguishing protein markers (i.e. Mk/Ery/DC) lose separation You can verify this using FindMarkers at the RNA level, as well 16.8 Additional exploration: another example of multi-modal analysis For another nice example of multi-modal analysis, please explore this single cell ATAC-Seq vignette and this scATAC-seq data integration. 16.9 Acknowledgements This document is largely a tutorial from Seurat website, with some small modifications. The official vignette is available at Using Seurat with multi-modal data. "],
["diy-project.html", "17 DIY Project 17.1 Slides", " 17 DIY Project 17.1 Slides "],
["diy-lab.html", "18 DIY Lab 18.1 DIY Lab", " 18 DIY Lab library(Seurat) library(dplyr) library(Matrix) library(gdata) library(utils) library(liger) library(SingleCellExperiment) library(destiny) library(scater) library(clusterExperiment) library(gam) library(corrplot) library(ggplot2) library(ggthemes) library(ggbeeswarm) library(cowplot) library(RColorBrewer) 18.1 DIY Lab Hopefully now you have a “feel” for what scRNA-seq analysis entails. Today we will work in groups to analyze a publicly available data set: IDH-mutated gliomas. Your data includes: IDH_A_processed_data_portal.txt - the TPM matrix, already in log scale IDH_A_cell_type_assignment_portal.txt - a classification of cells to malignant and non-malignant groups, and to tumors You also have files for different signatures. What would you like to focus on today? If it’s clustering and identifying cell populations we reccomend you use all the data and try to distinguish the different cell types. If it’s combining a few datasets and work on batch correction, we reccomend you focus on all malignant cells and work on the batch effects among tumors and identifying cell populations shared among them. If it’s identifying subtle differenced in clustering and trying also to identify lineages we reccomend you use one tumor. Most importantly, feel free to explore what ever interest you! # read the single cell RNA data sc.data.dirname &lt;- &quot;data/lab20_DIY/&quot; # if your rstudio crashes and you would like to use a smaller dataset counts &lt;- read.table(file = paste0(sc.data.dirname,&quot;/IDH_A_processed_data_portal_filtered.txt&quot;), sep=&quot;\\t&quot;, header = TRUE, row.names=1) classification &lt;- read.table(file = paste0(sc.data.dirname,&quot;/IDH_A_cell_type_assignment_portal_filtered.txt&quot;), sep=&quot;\\t&quot;, header = TRUE) Create a seurat object filtering out the very extreme cases. seurat&lt;-CreateSeuratObject(counts = counts, min.cells = 3, min.features = 350, project = &quot;Astrocytomas&quot;) ## Warning: Feature names cannot have underscores (&#39;_&#39;), replacing with dashes ## (&#39;-&#39;) vec.cell.type &lt;- classification$type names(vec.cell.type) &lt;- classification$cell_name seurat &lt;- AddMetaData(object = seurat, metadata = vec.cell.type, col.name = &quot;cell_type&quot;) vec.tumor.name &lt;- classification$tumor_name names(vec.tumor.name) &lt;- classification$cell_name seurat &lt;- AddMetaData(object = seurat, metadata = vec.tumor.name, col.name = &quot;tumor_name&quot;) #Notice: Unfortunetlay this dataset does not provide mitochondrial genes so we cannot calculate percent.mito # load resources resources.dirname &lt;- &quot;data/resources/&quot; # Load the the list of house keeping genes hkgenes &lt;- read.table(paste0(resources.dirname,&quot;/tirosh_house_keeping.txt&quot;), skip = 2) hkgenes &lt;- as.vector(hkgenes$V1) # remove hkgenes that were not found hkgenes.found &lt;- which(toupper(rownames(seurat@assays$RNA)) %in% hkgenes) n.expressed.hkgenes &lt;- Matrix::colSums(seurat@assays$RNA[hkgenes.found, ] &gt; 0) seurat &lt;- AddMetaData(object = seurat, metadata = n.expressed.hkgenes, col.name = &quot;n.exp.hkgenes&quot;) VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;,&quot;n.exp.hkgenes&quot;), ncol = 3) You can start by filtering extreme outliers if you would like (just replace the ‘?’) seurat &lt;- subset(seurat, subset = nFeature_RNA &gt; ? &amp; nFeature_RNA &lt; ? &amp; n.exp.hkgenes &gt; ?) And normalize: seurat &lt;- NormalizeData(object = seurat, normalization.method = &quot;LogNormalize&quot;, scale.factor = 1e4) # Read in a list of cell cycle markers, from Tirosh et al, 2015. # We can segregate this list into markers of G2/M phase and markers of S phase. s.genes &lt;- Seurat::cc.genes$s.genes g2m.genes &lt;- Seurat::cc.genes$g2m.genes seurat &lt;- CellCycleScoring(object = seurat, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE) seurat &lt;- AddModuleScore(object = seurat, features = list(read.table(paste0(resources.dirname,&quot;astro_genes.txt&quot;))$V1), name = &quot;astro_signature&quot;) seurat &lt;- AddModuleScore(object = seurat, features = list(read.table(paste0(resources.dirname,&quot;oligo_genes.txt&quot;))$V1), name = &quot;oligo_signature&quot;) seurat &lt;- AddModuleScore(object = seurat, features = list(read.table(paste0(resources.dirname,&quot;stemness_genes.txt&quot;))$V1), name = &quot;stemness_signature&quot;) NOTICE: THESE FOLLOWING COMMANDS WILL ONLY WORK AFTER CREATEING UMAP/tSNE Here are useful markers that can be used to explore the clusters after you will cluster the data FeaturePlot(seurat, features = c(&quot;CD14&quot;,&quot;CSF1R&quot;,&quot;FCER1G&quot;,&quot;FCGR3A&quot;)) # markers for macrophages FeaturePlot(seurat, features = c(&quot;MBP&quot;,&quot;MAG&quot;,&quot;MOG&quot;)) # markers for oligodendrocytes And a few useful commands, that can be used after clustering: # notice that the name of the signature is the name you assigned to it, plus &quot;1&quot; that seurat is adding to it FeaturePlot(seurat, features = c(&quot;oligo_signature1&quot;,&quot;astro_signature1&quot;,&quot;stemness_signature1&quot;)) If you want to focus on just malignant cells, or just one tumor at a time seurat.malignant&lt;- subset(seurat, subset = cell_type == &quot;malignant&quot;) #keep only malignant cells seurat.malignant.MGH107&lt;- subset(seurat.malignant, subset = tumor_name == &quot;MGH107neg&quot;) #keep only malignant MGH107 cells seurat.malignant.MGH44&lt;- subset(seurat.malignant, subset = tumor_name == &quot;MGH44&quot;) #keep only malignant MGH44 cells Ok, you are ready! Discuss what you wish to explore and go for it! "],
["single-cell-resources.html", "19 Single Cell Resources 19.1 Comprehensive list of single-cell resources 19.2 Computational packages for single-cell analysis 19.3 eLife Commentary on the Human Cell Atlas 19.4 Online courses", " 19 Single Cell Resources 19.1 Comprehensive list of single-cell resources https://github.com/seandavi/awesome-single-cell 19.2 Computational packages for single-cell analysis http://bioconductor.org/packages/devel/workflows/html/simpleSingleCell.html https://satijalab.org/seurat/ https://scanpy.readthedocs.io/ 19.3 eLife Commentary on the Human Cell Atlas link - Nature Commentary on the Human Cell Atlas - https://www.nature.com/news/the-human-cell-atlas-from-vision-to-reality-1.22854 19.4 Online courses Analysis of single cell RNA-seq data Single Cell Genomics Day Simple Single Cell Single Cell Transcriptomics R for Data Sciences "],
["references.html", "References", " References "]
]
